
STM32WB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003554  08003554  00004554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080036bc  080036bc  000046bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080036c0  080036c0  000046c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000148  20000008  080036c4  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  20000150  0800380c  00005150  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000340  0800380c  00005340  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a22d  00000000  00000000  00005180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001f68  00000000  00000000  0000f3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ba8  00000000  00000000  00011318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000892  00000000  00000000  00011ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001c418  00000000  00000000  00012752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b133  00000000  00000000  0002eb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000add43  00000000  00000000  00039c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000086  00000000  00000000  000e79e0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034dc  00000000  00000000  000e7a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000062  00000000  00000000  000eaf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000150 	.word	0x20000150
 8000158:	00000000 	.word	0x00000000
 800015c:	0800353c 	.word	0x0800353c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000154 	.word	0x20000154
 8000178:	0800353c 	.word	0x0800353c

0800017c <SystemClock_Config>:
 */

#include "girgitware.h"

void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b098      	sub	sp, #96	@ 0x60
 8000180:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000182:	f107 031c 	add.w	r3, r7, #28
 8000186:	2244      	movs	r2, #68	@ 0x44
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f002 fef2 	bl	8002f74 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000190:	463b      	mov	r3, r7
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]
 800019e:	615a      	str	r2, [r3, #20]
 80001a0:	619a      	str	r2, [r3, #24]

    /** Macro to configure the PLL multiplication factor
     */
    __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80001a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001a6:	68db      	ldr	r3, [r3, #12]
 80001a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80001ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80001b0:	60d3      	str	r3, [r2, #12]

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80001b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	f023 0303 	bic.w	r3, r3, #3
 80001bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	60d3      	str	r3, [r2, #12]
    // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI;
 80001c6:	2322      	movs	r3, #34	@ 0x22
 80001c8:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80001ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d4:	2340      	movs	r3, #64	@ 0x40
 80001d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80001d8:	2300      	movs	r3, #0
 80001da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80001dc:	2360      	movs	r3, #96	@ 0x60
 80001de:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e0:	2300      	movs	r3, #0
 80001e2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001e4:	f107 031c 	add.w	r3, r7, #28
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 f927 	bl	800143c <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7c>
        ErrorHandler();
 80001f4:	f000 f81c 	bl	8000230 <ErrorHandler>
    }

    /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80001f8:	236f      	movs	r3, #111	@ 0x6f
 80001fa:	603b      	str	r3, [r7, #0]
        | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
        | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000214:	463b      	mov	r3, r7
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fc45 	bl	8001aa8 <HAL_RCC_ClockConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0xac>
        ErrorHandler();
 8000224:	f000 f804 	bl	8000230 <ErrorHandler>
    }
}
 8000228:	bf00      	nop
 800022a:	3760      	adds	r7, #96	@ 0x60
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <ErrorHandler>:

__attribute__((weak)) void ErrorHandler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
    while (1) {
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <ErrorHandler+0x4>

08000238 <GirgitWareInit>:
    }
}

void GirgitWareInit(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
    HAL_Init();
 800023c:	f000 fa24 	bl	8000688 <HAL_Init>
    SystemClock_Config();
 8000240:	f7ff ff9c 	bl	800017c <SystemClock_Config>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}

08000248 <SysTick_Handler>:

void SysTickHandler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800024c:	f000 fa7e 	bl	800074c <HAL_IncTick>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}

08000254 <DelayMS>:

void DelayMS(uint32_t time)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    HAL_Delay(time);
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 faa1 	bl	80007a4 <HAL_Delay>
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}

0800026a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800026a:	b480      	push	{r7}
 800026c:	b085      	sub	sp, #20
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000276:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4313      	orrs	r3, r2
 8000280:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4013      	ands	r3, r2
 800028c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800028e:	68fb      	ldr	r3, [r7, #12]
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <GPIO_Init>:
 * @brief  Initializes the specified GPIO pin.
 * @param  gpio_handle: Pointer to a GPIO_Handle structure that contains
 *         the configuration information for the specified GPIO pin.
 * @retval None
 */
void GPIO_Init(GPIO_Handle* gpio_handle) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
    if (gpio_handle == NULL) {
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d050      	beq.n	800034c <GPIO_Init+0xb0>
        return;  // Handle null pointer
    }

    // Enable the clock for the specified GPIO port
    #ifdef GPIOA
    if (gpio_handle->port == GPIOA) {
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002b2:	d102      	bne.n	80002ba <GPIO_Init+0x1e>
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ffd8 	bl	800026a <LL_AHB2_GRP1_EnableClock>
    }
    #endif

    #ifdef GPIOB
    if (gpio_handle->port == GPIOB) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a25      	ldr	r2, [pc, #148]	@ (8000354 <GPIO_Init+0xb8>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d102      	bne.n	80002ca <GPIO_Init+0x2e>
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c4:	2002      	movs	r0, #2
 80002c6:	f7ff ffd0 	bl	800026a <LL_AHB2_GRP1_EnableClock>
    }
    #endif

    #ifdef GPIOC
    if (gpio_handle->port == GPIOC) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <GPIO_Init+0xbc>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d102      	bne.n	80002da <GPIO_Init+0x3e>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d4:	2004      	movs	r0, #4
 80002d6:	f7ff ffc8 	bl	800026a <LL_AHB2_GRP1_EnableClock>
        __HAL_RCC_GPIOD_CLK_ENABLE();
    }
    #endif

    #ifdef GPIOE
    if (gpio_handle->port == GPIOE) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a1f      	ldr	r2, [pc, #124]	@ (800035c <GPIO_Init+0xc0>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d102      	bne.n	80002ea <GPIO_Init+0x4e>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80002e4:	2010      	movs	r0, #16
 80002e6:	f7ff ffc0 	bl	800026a <LL_AHB2_GRP1_EnableClock>
    }
    #endif

    #ifdef GPIOH
    if (gpio_handle->port == GPIOH) {
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000360 <GPIO_Init+0xc4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d102      	bne.n	80002fa <GPIO_Init+0x5e>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 80002f4:	2080      	movs	r0, #128	@ 0x80
 80002f6:	f7ff ffb8 	bl	800026a <LL_AHB2_GRP1_EnableClock>
    }
    #endif

    // Initialize the GPIO_InitTypeDef structure
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

    // Set the pin using the SDK-defined macros
    GPIO_InitStruct.Pin = gpio_handle->pin;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	889b      	ldrh	r3, [r3, #4]
 800030e:	60fb      	str	r3, [r7, #12]

    // Set the mode, default to output push-pull if not specified
    GPIO_InitStruct.Mode = (gpio_handle->mode != 0) ? gpio_handle->mode : GPIO_MODE_OUTPUT_PP;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <GPIO_Init+0x82>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	e000      	b.n	8000320 <GPIO_Init+0x84>
 800031e:	2301      	movs	r3, #1
 8000320:	613b      	str	r3, [r7, #16]

    // Set the pull-up/pull-down configuration, default to no pull
    GPIO_InitStruct.Pull = (gpio_handle->pullUpPullDownSelect != 0) ? gpio_handle->pullUpPullDownSelect : GPIO_NOPULL;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	617b      	str	r3, [r7, #20]

    // Set the speed, default to low speed
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]

    // Set the alternate function if specified
    if (gpio_handle->alternateFunction != 0) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <GPIO_Init+0x9e>
        GPIO_InitStruct.Alternate = gpio_handle->alternateFunction;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	61fb      	str	r3, [r7, #28]
    }

    // Initialize the GPIO with the configured settings
    HAL_GPIO_Init(gpio_handle->port, &GPIO_InitStruct);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f107 020c 	add.w	r2, r7, #12
 8000342:	4611      	mov	r1, r2
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fbbf 	bl	8000ac8 <HAL_GPIO_Init>
 800034a:	e000      	b.n	800034e <GPIO_Init+0xb2>
        return;  // Handle null pointer
 800034c:	bf00      	nop
}
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000400 	.word	0x48000400
 8000358:	48000800 	.word	0x48000800
 800035c:	48001000 	.word	0x48001000
 8000360:	48001c00 	.word	0x48001c00

08000364 <GPIO_Write>:
 * @param  gpio_handle: Pointer to a GPIO_Handle structure that contains
 *         the configuration information for the specified GPIO pin.
 * @param  value: The state to write to the pin (PIN_HIGH or PIN_LOW).
 * @retval None
 */
void GPIO_Write(GPIO_Handle* gpio_handle, PinState value) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
    if (gpio_handle == NULL) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d00f      	beq.n	8000396 <GPIO_Write+0x32>
        return;  // Handle null pointer
    }

    // Convert PinState to HAL GPIO_PinState
    GPIO_PinState pinState = (value == PIN_HIGH) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	2b01      	cmp	r3, #1
 800037a:	bf0c      	ite	eq
 800037c:	2301      	moveq	r3, #1
 800037e:	2300      	movne	r3, #0
 8000380:	b2db      	uxtb	r3, r3
 8000382:	73fb      	strb	r3, [r7, #15]

    // Write the pin state using HAL function
    HAL_GPIO_WritePin(gpio_handle->port, gpio_handle->pin, pinState);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6818      	ldr	r0, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	889b      	ldrh	r3, [r3, #4]
 800038c:	7bfa      	ldrb	r2, [r7, #15]
 800038e:	4619      	mov	r1, r3
 8000390:	f000 fd02 	bl	8000d98 <HAL_GPIO_WritePin>
 8000394:	e000      	b.n	8000398 <GPIO_Write+0x34>
        return;  // Handle null pointer
 8000396:	bf00      	nop
}
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800039e:	b480      	push	{r7}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80003ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4013      	ands	r3, r2
 80003c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c2:	68fb      	ldr	r3, [r7, #12]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <GET_SPI_INDEX>:
        SPI_HandleTypeDef sdkHandle; /*!< SDK SPI Handle */
        SPI_Handle *gwHandle;        /*!< Girgitware SPI Handle */
    } SPI_LinkTypeDef;

    static inline int GET_SPI_INDEX(SPI_TypeDef *instance)
    {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
        if (instance == SPI1)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a06      	ldr	r2, [pc, #24]	@ (80003f4 <GET_SPI_INDEX+0x24>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d101      	bne.n	80003e4 <GET_SPI_INDEX+0x14>
        {
            return SPI1_LINK_TABLE_INDEX;
 80003e0:	2300      	movs	r3, #0
 80003e2:	e001      	b.n	80003e8 <GET_SPI_INDEX+0x18>
        if (instance == SPI6)
        {
            return SPI6_LINK_TABLE_INDEX;
        }
#endif
        return -1; // Default case for unknown instances
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295
    }
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40013000 	.word	0x40013000

080003f8 <SPI_Init>:
/* Externally declare the SPI handle link table */
extern SPI_LinkTypeDef spiHandleLinkTable[SPI_HANDLE_LINK_TABLE_SIZE];

/* Function Definitions -----------------------------------------------------*/

SPI_Status SPI_Init(SPI_Handle *user_spi_handle) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
    // Check if the user handle is NULL
    if (user_spi_handle == NULL) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d101      	bne.n	800040a <SPI_Init+0x12>
        return SPI_ERROR; // Return error if handle is NULL
 8000406:	2301      	movs	r3, #1
 8000408:	e0a9      	b.n	800055e <SPI_Init+0x166>
    }

    // Enable the clock for the SPI instance
    if (user_spi_handle->instance == SPI1) {
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800040e:	4a56      	ldr	r2, [pc, #344]	@ (8000568 <SPI_Init+0x170>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d103      	bne.n	800041c <SPI_Init+0x24>
        __HAL_RCC_SPI1_CLK_ENABLE();
 8000414:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000418:	f7ff ffc1 	bl	800039e <LL_APB2_GRP1_EnableClock>
        __HAL_RCC_SPI6_CLK_ENABLE();
    }
#endif

    // Get the index for the corresponding SPI instance
    int index = GET_SPI_INDEX(user_spi_handle->instance);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ffd5 	bl	80003d0 <GET_SPI_INDEX>
 8000426:	61f8      	str	r0, [r7, #28]
    if (index < 0) {
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <SPI_Init+0x3a>
        return SPI_ERROR; // Return error if index is invalid
 800042e:	2301      	movs	r3, #1
 8000430:	e095      	b.n	800055e <SPI_Init+0x166>
    }

    // Access the SPI link table
    SPI_LinkTypeDef *link = &spiHandleLinkTable[index];
 8000432:	69fb      	ldr	r3, [r7, #28]
 8000434:	2268      	movs	r2, #104	@ 0x68
 8000436:	fb02 f303 	mul.w	r3, r2, r3
 800043a:	4a4c      	ldr	r2, [pc, #304]	@ (800056c <SPI_Init+0x174>)
 800043c:	4413      	add	r3, r2
 800043e:	61bb      	str	r3, [r7, #24]

    // Assign the user handle to the link table's girgitware handle
    link->gwHandle = user_spi_handle;
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	665a      	str	r2, [r3, #100]	@ 0x64

    // Assign values from user handle to SDK handle
    link->sdkHandle.Instance = user_spi_handle->instance;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	601a      	str	r2, [r3, #0]
    link->sdkHandle.Init.Mode = user_spi_handle->init.deviceMode;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	605a      	str	r2, [r3, #4]
    link->sdkHandle.Init.Direction = user_spi_handle->init.direction;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	609a      	str	r2, [r3, #8]
    link->sdkHandle.Init.DataSize = user_spi_handle->init.dataFrameSize;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	60da      	str	r2, [r3, #12]
    link->sdkHandle.Init.CLKPolarity = user_spi_handle->init.clockPolarity;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	611a      	str	r2, [r3, #16]
    link->sdkHandle.Init.CLKPhase = user_spi_handle->init.clockPhase;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	615a      	str	r2, [r3, #20]
    link->sdkHandle.Init.NSS = user_spi_handle->init.chipSelectMode;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6a1a      	ldr	r2, [r3, #32]
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	619a      	str	r2, [r3, #24]
    link->sdkHandle.Init.FirstBit = user_spi_handle->init.bitOrder;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	691a      	ldr	r2, [r3, #16]
 8000482:	69bb      	ldr	r3, [r7, #24]
 8000484:	621a      	str	r2, [r3, #32]
    link->sdkHandle.Init.TIMode = SPI_TIMODE_DISABLE; // Default value
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	2200      	movs	r2, #0
 800048a:	625a      	str	r2, [r3, #36]	@ 0x24
    link->sdkHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE; // Default value
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	2200      	movs	r2, #0
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
    link->sdkHandle.Init.CRCPolynomial = 7; // Default value
 8000492:	69bb      	ldr	r3, [r7, #24]
 8000494:	2207      	movs	r2, #7
 8000496:	62da      	str	r2, [r3, #44]	@ 0x2c
    link->sdkHandle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE; // Default value
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	2200      	movs	r2, #0
 800049c:	631a      	str	r2, [r3, #48]	@ 0x30
    link->sdkHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE; // Default value
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	2200      	movs	r2, #0
 80004a2:	635a      	str	r2, [r3, #52]	@ 0x34

    // Set the baud rate prescaler
    uint32_t sourceClockFrequency = user_spi_handle->init.sourceClockFrequency;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	617b      	str	r3, [r7, #20]
    uint32_t sclkFrequency = user_spi_handle->init.spiClockFrequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	613b      	str	r3, [r7, #16]
    uint32_t division = sourceClockFrequency / sclkFrequency;
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b8:	60fb      	str	r3, [r7, #12]

    // Assign the best baud rate prescaler based on the division
    if (division <= 2) {
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d803      	bhi.n	80004c8 <SPI_Init+0xd0>
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
 80004c6:	e02c      	b.n	8000522 <SPI_Init+0x12a>
    } else if (division <= 4) {
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d803      	bhi.n	80004d6 <SPI_Init+0xde>
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	2208      	movs	r2, #8
 80004d2:	61da      	str	r2, [r3, #28]
 80004d4:	e025      	b.n	8000522 <SPI_Init+0x12a>
    } else if (division <= 8) {
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d803      	bhi.n	80004e4 <SPI_Init+0xec>
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004dc:	69bb      	ldr	r3, [r7, #24]
 80004de:	2210      	movs	r2, #16
 80004e0:	61da      	str	r2, [r3, #28]
 80004e2:	e01e      	b.n	8000522 <SPI_Init+0x12a>
    } else if (division <= 16) {
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b10      	cmp	r3, #16
 80004e8:	d803      	bhi.n	80004f2 <SPI_Init+0xfa>
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	2218      	movs	r2, #24
 80004ee:	61da      	str	r2, [r3, #28]
 80004f0:	e017      	b.n	8000522 <SPI_Init+0x12a>
    } else if (division <= 32) {
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b20      	cmp	r3, #32
 80004f6:	d803      	bhi.n	8000500 <SPI_Init+0x108>
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	2220      	movs	r2, #32
 80004fc:	61da      	str	r2, [r3, #28]
 80004fe:	e010      	b.n	8000522 <SPI_Init+0x12a>
    } else if (division <= 64) {
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b40      	cmp	r3, #64	@ 0x40
 8000504:	d803      	bhi.n	800050e <SPI_Init+0x116>
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	2228      	movs	r2, #40	@ 0x28
 800050a:	61da      	str	r2, [r3, #28]
 800050c:	e009      	b.n	8000522 <SPI_Init+0x12a>
    } else if (division <= 128) {
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2b80      	cmp	r3, #128	@ 0x80
 8000512:	d803      	bhi.n	800051c <SPI_Init+0x124>
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	2230      	movs	r2, #48	@ 0x30
 8000518:	61da      	str	r2, [r3, #28]
 800051a:	e002      	b.n	8000522 <SPI_Init+0x12a>
    } else {
        link->sdkHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	2238      	movs	r2, #56	@ 0x38
 8000520:	61da      	str	r2, [r3, #28]
    }

    // Call the pin setup function
    if (user_spi_handle->pinSetup != NULL) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000526:	2b00      	cmp	r3, #0
 8000528:	d003      	beq.n	8000532 <SPI_Init+0x13a>
        user_spi_handle->pinSetup(user_spi_handle);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	4798      	blx	r3
    }

    // Enable interrupts if enabled in user handle
    if (user_spi_handle->init.interruptEnable) {
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000536:	2b00      	cmp	r3, #0
 8000538:	d007      	beq.n	800054a <SPI_Init+0x152>
#if defined(SPI1)
        if (user_spi_handle->instance == SPI1) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <SPI_Init+0x170>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d102      	bne.n	800054a <SPI_Init+0x152>
            HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000544:	2022      	movs	r0, #34	@ 0x22
 8000546:	f000 fa46 	bl	80009d6 <HAL_NVIC_EnableIRQ>
        }
#endif
    }

    // Call the SDK function to initialize the SPI module
    return (HAL_SPI_Init(&link->sdkHandle) == HAL_OK) ? SPI_OK : SPI_ERROR;
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fcf7 	bl	8001f40 <HAL_SPI_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf14      	ite	ne
 8000558:	2301      	movne	r3, #1
 800055a:	2300      	moveq	r3, #0
 800055c:	b2db      	uxtb	r3, r3
}
 800055e:	4618      	mov	r0, r3
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40013000 	.word	0x40013000
 800056c:	2000016c 	.word	0x2000016c

08000570 <SPI_Transmit>:
    }

    return SPI_OK; // Return success code
}

SPI_Status SPI_Transmit(SPI_Handle *user_spi_handle, const uint8_t *txData, uint16_t dataSize, uint16_t timeout) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	460b      	mov	r3, r1
 8000580:	80fb      	strh	r3, [r7, #6]
 8000582:	4613      	mov	r3, r2
 8000584:	80bb      	strh	r3, [r7, #4]
    // Check if the user handle or data pointer is NULL
    if (user_spi_handle == NULL || txData == NULL) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <SPI_Transmit+0x22>
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <SPI_Transmit+0x26>
        return SPI_ERROR; // Return error if handle or data is NULL
 8000592:	2301      	movs	r3, #1
 8000594:	e02a      	b.n	80005ec <SPI_Transmit+0x7c>
    }

    // Get the index for the corresponding SPI instance
    int index = GET_SPI_INDEX(user_spi_handle->instance);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff18 	bl	80003d0 <GET_SPI_INDEX>
 80005a0:	61f8      	str	r0, [r7, #28]
    if (index < 0) {
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	da01      	bge.n	80005ac <SPI_Transmit+0x3c>
        return SPI_ERROR; // Return error if index is invalid
 80005a8:	2301      	movs	r3, #1
 80005aa:	e01f      	b.n	80005ec <SPI_Transmit+0x7c>
    }

    // Access the link table to get the corresponding SDK handle
    SPI_LinkTypeDef *link = &spiHandleLinkTable[index];
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	2268      	movs	r2, #104	@ 0x68
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4a0f      	ldr	r2, [pc, #60]	@ (80005f4 <SPI_Transmit+0x84>)
 80005b6:	4413      	add	r3, r2
 80005b8:	61bb      	str	r3, [r7, #24]

    // Transmit the data using the SDK function
    HAL_StatusTypeDef halStatus = HAL_SPI_Transmit(&link->sdkHandle, (uint8_t *)txData, dataSize, timeout);
 80005ba:	69b8      	ldr	r0, [r7, #24]
 80005bc:	88bb      	ldrh	r3, [r7, #4]
 80005be:	88fa      	ldrh	r2, [r7, #6]
 80005c0:	68b9      	ldr	r1, [r7, #8]
 80005c2:	f001 fd6a 	bl	800209a <HAL_SPI_Transmit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	75fb      	strb	r3, [r7, #23]

    // Map the HAL status code to SPI status code
    switch (halStatus) {
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d00a      	beq.n	80005e6 <SPI_Transmit+0x76>
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	dc0a      	bgt.n	80005ea <SPI_Transmit+0x7a>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <SPI_Transmit+0x6e>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d002      	beq.n	80005e2 <SPI_Transmit+0x72>
 80005dc:	e005      	b.n	80005ea <SPI_Transmit+0x7a>
        case HAL_OK:
            return SPI_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	e004      	b.n	80005ec <SPI_Transmit+0x7c>
        case HAL_ERROR:
            return SPI_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e002      	b.n	80005ec <SPI_Transmit+0x7c>
        case HAL_BUSY:
            return SPI_BUSY;
 80005e6:	2302      	movs	r3, #2
 80005e8:	e000      	b.n	80005ec <SPI_Transmit+0x7c>
        default:
            return SPI_OTHER; // For any other status codes
 80005ea:	2304      	movs	r3, #4
    }
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000016c 	.word	0x2000016c

080005f8 <SPI1_IRQHandler>:
    }
}

/* Interrupt Handlers --------------------------------------------------------*/
#ifdef SPI1
void SPI1_IRQHandler(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    GW_SPI1_IRQHandler();
 80005fc:	f002 fa26 	bl	8002a4c <GW_SPI1_IRQHandler>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <GW_SPI_IRQHandler>:
void SPI6_IRQHandler(void) {
    GW_SPI6_IRQHandler();
}
#endif

void GW_SPI_IRQHandler(SPI_Handle *user_spi_handle) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    // Check if the user handle is NULL
    if (user_spi_handle == NULL) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d014      	beq.n	800063c <GW_SPI_IRQHandler+0x38>
        return; // Exit if handle is NULL
    }

    // Get the index for the corresponding SPI instance
    int index = GET_SPI_INDEX(user_spi_handle->instance);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff feda 	bl	80003d0 <GET_SPI_INDEX>
 800061c:	60f8      	str	r0, [r7, #12]
    if (index < 0) {
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0d      	blt.n	8000640 <GW_SPI_IRQHandler+0x3c>
        return; // Exit if index is invalid
    }

    // Access the link table to get the corresponding SDK handle
    SPI_LinkTypeDef *link = &spiHandleLinkTable[index];
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2268      	movs	r2, #104	@ 0x68
 8000628:	fb02 f303 	mul.w	r3, r2, r3
 800062c:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <GW_SPI_IRQHandler+0x44>)
 800062e:	4413      	add	r3, r2
 8000630:	60bb      	str	r3, [r7, #8]

    // Call the HAL SPI IRQ handler
    HAL_SPI_IRQHandler(&link->sdkHandle);
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fea5 	bl	8002384 <HAL_SPI_IRQHandler>
 800063a:	e002      	b.n	8000642 <GW_SPI_IRQHandler+0x3e>
        return; // Exit if handle is NULL
 800063c:	bf00      	nop
 800063e:	e000      	b.n	8000642 <GW_SPI_IRQHandler+0x3e>
        return; // Exit if index is invalid
 8000640:	bf00      	nop
}
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000016c 	.word	0x2000016c

0800064c <HAL_SPI_ErrorCallback>:

    // Call the user-defined callback function by passing the user handle
    GW_SPI_TxRxHalfCpltCallback(linkEntry->gwHandle);
}

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    // Get the index for the corresponding SPI instance
    uint16_t spiIndex = GET_SPI_INDEX(hspi->Instance);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff feb9 	bl	80003d0 <GET_SPI_INDEX>
 800065e:	4603      	mov	r3, r0
 8000660:	81fb      	strh	r3, [r7, #14]

    // Access the SPI_LinkTypeDef struct at the index in the spiHandleLinkTable array
    SPI_LinkTypeDef *linkEntry = &spiHandleLinkTable[spiIndex];
 8000662:	89fb      	ldrh	r3, [r7, #14]
 8000664:	2268      	movs	r2, #104	@ 0x68
 8000666:	fb02 f303 	mul.w	r3, r2, r3
 800066a:	4a06      	ldr	r2, [pc, #24]	@ (8000684 <HAL_SPI_ErrorCallback+0x38>)
 800066c:	4413      	add	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]

    // Call the user-defined callback function by passing the user handle
    GW_SPI_ErrorCallback(linkEntry->gwHandle);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f9f3 	bl	8002a60 <GW_SPI_ErrorCallback>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000016c 	.word	0x2000016c

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <HAL_Init+0x3c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <HAL_Init+0x3c>)
 8000698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800069c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 f974 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f817 	bl	80006d8 <HAL_InitTick>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	e001      	b.n	80006ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b6:	f000 f807 	bl	80006c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	58004000 	.word	0x58004000

080006c8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <HAL_InitTick+0x6c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d024      	beq.n	8000736 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006ec:	f001 fb8a 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <HAL_InitTick+0x6c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000700:	fbb2 f3f3 	udiv	r3, r2, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f974 	bl	80009f2 <HAL_SYSTICK_Config>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d10f      	bne.n	8000730 <HAL_InitTick+0x58>
	 /*Configure the SysTick to have interrupt in 1ms time basis*/
//	  if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b0f      	cmp	r3, #15
 8000714:	d809      	bhi.n	800072a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000716:	2200      	movs	r2, #0
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	f000 f940 	bl	80009a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000722:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <HAL_InitTick+0x70>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	e007      	b.n	800073a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	e004      	b.n	800073a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000730:	2301      	movs	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e001      	b.n	800073a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000b8 	.word	0x200000b8
 8000748:	200000b4 	.word	0x200000b4

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
//	uwTick += (uint32_t)1;
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000b8 	.word	0x200000b8
 8000770:	200001d4 	.word	0x200001d4

08000774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b03      	ldr	r3, [pc, #12]	@ (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200001d4 	.word	0x200001d4

0800078c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <HAL_GetTickPrio+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200000b4 	.word	0x200000b4

080007a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ac:	f7ff ffe2 	bl	8000774 <HAL_GetTick>
 80007b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007bc:	d005      	beq.n	80007ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <HAL_Delay+0x44>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ca:	bf00      	nop
 80007cc:	f7ff ffd2 	bl	8000774 <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d8f7      	bhi.n	80007cc <HAL_Delay+0x28>
  {
  }
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000b8 	.word	0x200000b8

080007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081e:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0b      	blt.n	800087a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f003 021f 	and.w	r2, r3, #31
 8000868:	4907      	ldr	r1, [pc, #28]	@ (8000888 <__NVIC_EnableIRQ+0x38>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	095b      	lsrs	r3, r3, #5
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	@ (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	@ (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	@ 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	@ 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f7ff ff8e 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff29 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff40 	bl	8000834 <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff90 	bl	80008e0 <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5f 	bl	800088c <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff33 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffa4 	bl	8000948 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d005      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2204      	movs	r2, #4
 8000a26:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	e047      	b.n	8000abe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 020e 	bic.w	r2, r2, #14
 8000a3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 0201 	bic.w	r2, r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f003 021c 	and.w	r2, r3, #28
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000a7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00c      	beq.n	8000a9e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000a92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000a9c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	4798      	blx	r3
    }
  }
  return status;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad6:	e146      	b.n	8000d66 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	2101      	movs	r1, #1
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 8138 	beq.w	8000d60 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d005      	beq.n	8000b08 <HAL_GPIO_Init+0x40>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d130      	bne.n	8000b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	f003 0201 	and.w	r2, r3, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d017      	beq.n	8000ba6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d123      	bne.n	8000bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	220f      	movs	r2, #15
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	691a      	ldr	r2, [r3, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	08da      	lsrs	r2, r3, #3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	6939      	ldr	r1, [r7, #16]
 8000bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0203 	and.w	r2, r3, #3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 8092 	beq.w	8000d60 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c3c:	4a51      	ldr	r2, [pc, #324]	@ (8000d84 <HAL_GPIO_Init+0x2bc>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c66:	d013      	beq.n	8000c90 <HAL_GPIO_Init+0x1c8>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a47      	ldr	r2, [pc, #284]	@ (8000d88 <HAL_GPIO_Init+0x2c0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00d      	beq.n	8000c8c <HAL_GPIO_Init+0x1c4>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a46      	ldr	r2, [pc, #280]	@ (8000d8c <HAL_GPIO_Init+0x2c4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x1c0>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a45      	ldr	r2, [pc, #276]	@ (8000d90 <HAL_GPIO_Init+0x2c8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_GPIO_Init+0x1bc>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e006      	b.n	8000c92 <HAL_GPIO_Init+0x1ca>
 8000c84:	2307      	movs	r3, #7
 8000c86:	e004      	b.n	8000c92 <HAL_GPIO_Init+0x1ca>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x1ca>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <HAL_GPIO_Init+0x1ca>
 8000c90:	2300      	movs	r3, #0
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	f002 0203 	and.w	r2, r2, #3
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca2:	4938      	ldr	r1, [pc, #224]	@ (8000d84 <HAL_GPIO_Init+0x2bc>)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cb0:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cfe:	4a25      	ldr	r2, [pc, #148]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d58:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3301      	adds	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f47f aeb1 	bne.w	8000ad8 <HAL_GPIO_Init+0x10>
  }
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	371c      	adds	r7, #28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40010000 	.word	0x40010000
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	48001000 	.word	0x48001000
 8000d94:	58000800 	.word	0x58000800

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	58000400 	.word	0x58000400

08000de8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000dfa:	d101      	bne.n	8000e00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e5a:	d101      	bne.n	8000e60 <LL_RCC_HSE_IsReady+0x18>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <LL_RCC_HSE_IsReady+0x1a>
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e9c:	6013      	str	r3, [r2, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eba:	d101      	bne.n	8000ec0 <LL_RCC_HSI_IsReady+0x18>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <LL_RCC_HSI_IsReady+0x1a>
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	061b      	lsls	r3, r3, #24
 8000ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d101      	bne.n	8000f96 <LL_RCC_LSE_IsReady+0x18>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_RCC_LSE_IsReady+0x1a>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d101      	bne.n	8000ffe <LL_RCC_LSI1_IsReady+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_RCC_LSI1_IsReady+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001038:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b08      	cmp	r3, #8
 8001060:	d101      	bne.n	8001066 <LL_RCC_LSI2_IsReady+0x18>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <LL_RCC_LSI2_IsReady+0x1a>
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800107a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800107e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001082:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800108e:	4313      	orrs	r3, r2
 8001090:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6013      	str	r3, [r2, #0]
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d101      	bne.n	80010f2 <LL_RCC_MSI_IsReady+0x16>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <LL_RCC_MSI_IsReady+0x18>
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800112c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001136:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2bb0      	cmp	r3, #176	@ 0xb0
 800113c:	d901      	bls.n	8001142 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800113e:	23b0      	movs	r3, #176	@ 0xb0
 8001140:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800116a:	4313      	orrs	r3, r2
 800116c:	604b      	str	r3, [r1, #4]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 0203 	bic.w	r2, r3, #3
 800118c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 030c 	and.w	r3, r3, #12
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80011f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800121a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800121e:	f023 020f 	bic.w	r2, r3, #15
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122a:	4313      	orrs	r3, r2
 800122c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800124e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800126c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001276:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4313      	orrs	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012f0:	6013      	str	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800130e:	d101      	bne.n	8001314 <LL_RCC_PLL_IsReady+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_RCC_PLL_IsReady+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800133e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 0303 	and.w	r3, r3, #3
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001394:	d101      	bne.n	800139a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80013aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013ba:	d101      	bne.n	80013c0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e0:	d101      	bne.n	80013e6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001400:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001404:	d101      	bne.n	800140a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800141a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001424:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001428:	d101      	bne.n	800142e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08d      	sub	sp, #52	@ 0x34
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e324      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 808d 	beq.w	8001576 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145c:	f7ff fea1 	bl	80011a2 <LL_RCC_GetSysClkSource>
 8001460:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001462:	f7ff ff82 	bl	800136a <LL_RCC_PLL_GetMainSource>
 8001466:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x3e>
 800146e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001470:	2b0c      	cmp	r3, #12
 8001472:	d147      	bne.n	8001504 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	2b01      	cmp	r3, #1
 8001478:	d144      	bne.n	8001504 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e308      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800148a:	f7ff fe4c 	bl	8001126 <LL_RCC_MSI_GetRange>
 800148e:	4603      	mov	r3, r0
 8001490:	429c      	cmp	r4, r3
 8001492:	d914      	bls.n	80014be <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fcc7 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e2f7      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe26 	bl	80010fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe4a 	bl	8001150 <LL_RCC_MSI_SetCalibTrimming>
 80014bc:	e013      	b.n	80014e6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fe1b 	bl	80010fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe3f 	bl	8001150 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fca8 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e2d8      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014e6:	f000 fc8d 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4aa4      	ldr	r2, [pc, #656]	@ (8001780 <HAL_RCC_OscConfig+0x344>)
 80014ee:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014f0:	4ba4      	ldr	r3, [pc, #656]	@ (8001784 <HAL_RCC_OscConfig+0x348>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f8ef 	bl	80006d8 <HAL_InitTick>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d039      	beq.n	8001574 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e2c9      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01e      	beq.n	800154a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150c:	f7ff fdc8 	bl	80010a0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001510:	f7ff f930 	bl	8000774 <HAL_GetTick>
 8001514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001518:	f7ff f92c 	bl	8000774 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e2b6      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800152a:	f7ff fdd7 	bl	80010dc <LL_RCC_MSI_IsReady>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f1      	beq.n	8001518 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fde0 	bl	80010fe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe04 	bl	8001150 <LL_RCC_MSI_SetCalibTrimming>
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800154a:	f7ff fdb8 	bl	80010be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154e:	f7ff f911 	bl	8000774 <HAL_GetTick>
 8001552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001556:	f7ff f90d 	bl	8000774 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e297      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001568:	f7ff fdb8 	bl	80010dc <LL_RCC_MSI_IsReady>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f1      	bne.n	8001556 <HAL_RCC_OscConfig+0x11a>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001574:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d047      	beq.n	8001612 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001582:	f7ff fe0e 	bl	80011a2 <LL_RCC_GetSysClkSource>
 8001586:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001588:	f7ff feef 	bl	800136a <LL_RCC_PLL_GetMainSource>
 800158c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x164>
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d108      	bne.n	80015ac <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d105      	bne.n	80015ac <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d134      	bne.n	8001612 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e275      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x180>
 80015b6:	f7ff fc29 	bl	8000e0c <LL_RCC_HSE_Enable>
 80015ba:	e001      	b.n	80015c0 <HAL_RCC_OscConfig+0x184>
 80015bc:	f7ff fc35 	bl	8000e2a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d012      	beq.n	80015ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff f8d4 	bl	8000774 <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff f8d0 	bl	8000774 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	@ 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e25a      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80015e2:	f7ff fc31 	bl	8000e48 <LL_RCC_HSE_IsReady>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f1      	beq.n	80015d0 <HAL_RCC_OscConfig+0x194>
 80015ec:	e011      	b.n	8001612 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff f8c1 	bl	8000774 <HAL_GetTick>
 80015f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f6:	f7ff f8bd 	bl	8000774 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b64      	cmp	r3, #100	@ 0x64
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e247      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001608:	f7ff fc1e 	bl	8000e48 <LL_RCC_HSE_IsReady>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f1      	bne.n	80015f6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d04c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161e:	f7ff fdc0 	bl	80011a2 <LL_RCC_GetSysClkSource>
 8001622:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001624:	f7ff fea1 	bl	800136a <LL_RCC_PLL_GetMainSource>
 8001628:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x200>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d10e      	bne.n	8001654 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e227      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fc3d 	bl	8000ecc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001652:	e031      	b.n	80016b8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d019      	beq.n	8001690 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	f7ff fc06 	bl	8000e6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff f888 	bl	8000774 <HAL_GetTick>
 8001664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff f884 	bl	8000774 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e20e      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800167a:	f7ff fc15 	bl	8000ea8 <LL_RCC_HSI_IsReady>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f1      	beq.n	8001668 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fc1f 	bl	8000ecc <LL_RCC_HSI_SetCalibTrimming>
 800168e:	e013      	b.n	80016b8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001690:	f7ff fbfb 	bl	8000e8a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff f86e 	bl	8000774 <HAL_GetTick>
 8001698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff f86a 	bl	8000774 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1f4      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80016ae:	f7ff fbfb 	bl	8000ea8 <LL_RCC_HSI_IsReady>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f1      	bne.n	800169c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a3 	beq.w	8001818 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d076      	beq.n	80017c8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d046      	beq.n	8001774 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80016e6:	f7ff fc7e 	bl	8000fe6 <LL_RCC_LSI1_IsReady>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d113      	bne.n	8001718 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80016f0:	f7ff fc57 	bl	8000fa2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016f4:	f7ff f83e 	bl	8000774 <HAL_GetTick>
 80016f8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80016fc:	f7ff f83a 	bl	8000774 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1c4      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800170e:	f7ff fc6a 	bl	8000fe6 <LL_RCC_LSI1_IsReady>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f1      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001718:	f7ff fc77 	bl	800100a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff f82a 	bl	8000774 <HAL_GetTick>
 8001720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001724:	f7ff f826 	bl	8000774 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b03      	cmp	r3, #3
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1b0      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001736:	f7ff fc8a 	bl	800104e <LL_RCC_LSI2_IsReady>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f1      	beq.n	8001724 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fc94 	bl	8001072 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800174a:	f7ff fc3b 	bl	8000fc4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff f811 	bl	8000774 <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001756:	f7ff f80d 	bl	8000774 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e197      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001768:	f7ff fc3d 	bl	8000fe6 <LL_RCC_LSI1_IsReady>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f1      	bne.n	8001756 <HAL_RCC_OscConfig+0x31a>
 8001772:	e051      	b.n	8001818 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001774:	f7ff fc15 	bl	8000fa2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7fe fffc 	bl	8000774 <HAL_GetTick>
 800177c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800177e:	e00c      	b.n	800179a <HAL_RCC_OscConfig+0x35e>
 8001780:	200000f0 	.word	0x200000f0
 8001784:	200000b4 	.word	0x200000b4
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001788:	f7fe fff4 	bl	8000774 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e17e      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800179a:	f7ff fc24 	bl	8000fe6 <LL_RCC_LSI1_IsReady>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f1      	beq.n	8001788 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80017a4:	f7ff fc42 	bl	800102c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017aa:	f7fe ffe3 	bl	8000774 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e16d      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80017bc:	f7ff fc47 	bl	800104e <LL_RCC_LSI2_IsReady>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f1      	bne.n	80017aa <HAL_RCC_OscConfig+0x36e>
 80017c6:	e027      	b.n	8001818 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80017c8:	f7ff fc30 	bl	800102c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7fe ffd2 	bl	8000774 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017d4:	f7fe ffce 	bl	8000774 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e158      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80017e6:	f7ff fc32 	bl	800104e <LL_RCC_LSI2_IsReady>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f1      	bne.n	80017d4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80017f0:	f7ff fbe8 	bl	8000fc4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7fe ffbe 	bl	8000774 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017fc:	f7fe ffba 	bl	8000774 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e144      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800180e:	f7ff fbea 	bl	8000fe6 <LL_RCC_LSI1_IsReady>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f1      	bne.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d05b      	beq.n	80018dc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b9e      	ldr	r3, [pc, #632]	@ (8001aa0 <HAL_RCC_OscConfig+0x664>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d114      	bne.n	800185a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001830:	f7ff faca 	bl	8000dc8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001834:	f7fe ff9e 	bl	8000774 <HAL_GetTick>
 8001838:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183c:	f7fe ff9a 	bl	8000774 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e124      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184e:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <HAL_RCC_OscConfig+0x664>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d102      	bne.n	8001868 <HAL_RCC_OscConfig+0x42c>
 8001862:	f7ff fb48 	bl	8000ef6 <LL_RCC_LSE_Enable>
 8001866:	e00c      	b.n	8001882 <HAL_RCC_OscConfig+0x446>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d104      	bne.n	800187a <HAL_RCC_OscConfig+0x43e>
 8001870:	f7ff fb63 	bl	8000f3a <LL_RCC_LSE_EnableBypass>
 8001874:	f7ff fb3f 	bl	8000ef6 <LL_RCC_LSE_Enable>
 8001878:	e003      	b.n	8001882 <HAL_RCC_OscConfig+0x446>
 800187a:	f7ff fb4d 	bl	8000f18 <LL_RCC_LSE_Disable>
 800187e:	f7ff fb6d 	bl	8000f5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d014      	beq.n	80018b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7fe ff73 	bl	8000774 <HAL_GetTick>
 800188e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7fe ff6f 	bl	8000774 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0f7      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80018a8:	f7ff fb69 	bl	8000f7e <LL_RCC_LSE_IsReady>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0ef      	beq.n	8001892 <HAL_RCC_OscConfig+0x456>
 80018b2:	e013      	b.n	80018dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7fe ff5e 	bl	8000774 <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7fe ff5a 	bl	8000774 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0e2      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80018d2:	f7ff fb54 	bl	8000f7e <LL_RCC_LSE_IsReady>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ef      	bne.n	80018bc <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80d8 	beq.w	8001a96 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e6:	f7ff fc5c 	bl	80011a2 <LL_RCC_GetSysClkSource>
 80018ea:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	f040 80a6 	bne.w	8001a4a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001908:	429a      	cmp	r2, r3
 800190a:	d123      	bne.n	8001954 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11c      	bne.n	8001954 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d114      	bne.n	8001954 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d10d      	bne.n	8001954 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d106      	bne.n	8001954 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d054      	beq.n	80019fe <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d04f      	beq.n	80019fa <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800195a:	f7ff fcc0 	bl	80012de <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800195e:	f7fe ff09 	bl	8000774 <HAL_GetTick>
 8001962:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7fe ff05 	bl	8000774 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e08f      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ef      	bne.n	8001966 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4b45      	ldr	r3, [pc, #276]	@ (8001aa4 <HAL_RCC_OscConfig+0x668>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800199e:	0212      	lsls	r2, r2, #8
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019b2:	430a      	orrs	r2, r1
 80019b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019bc:	f7ff fc80 	bl	80012c0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d0:	f7fe fed0 	bl	8000774 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7fe fecc 	bl	8000774 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e056      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f8:	e04d      	b.n	8001a96 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e04c      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d144      	bne.n	8001a96 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a0c:	f7ff fc58 	bl	80012c0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a20:	f7fe fea8 	bl	8000774 <HAL_GetTick>
 8001a24:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7fe fea4 	bl	8000774 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e02e      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ef      	beq.n	8001a28 <HAL_RCC_OscConfig+0x5ec>
 8001a48:	e025      	b.n	8001a96 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a50:	f7ff fc45 	bl	80012de <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7fe fe8e 	bl	8000774 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7fe fe8a 	bl	8000774 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ef      	bne.n	8001a5c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	60d3      	str	r3, [r2, #12]
 8001a90:	e001      	b.n	8001a96 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3734      	adds	r7, #52	@ 0x34
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	58000400 	.word	0x58000400
 8001aa4:	11c1808c 	.word	0x11c1808c

08001aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e12d      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b98      	ldr	r3, [pc, #608]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d91b      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b95      	ldr	r3, [pc, #596]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4993      	ldr	r1, [pc, #588]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ada:	f7fe fe4b 	bl	8000774 <HAL_GetTick>
 8001ade:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ae2:	f7fe fe47 	bl	8000774 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e111      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d1ef      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb51 	bl	80011ba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b18:	f7fe fe2c 	bl	8000774 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b20:	f7fe fe28 	bl	8000774 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e0f2      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001b32:	f7ff fc26 	bl	8001382 <LL_RCC_IsActiveFlag_HPRE>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f1      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d016      	beq.n	8001b76 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fb48 	bl	80011e2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b52:	f7fe fe0f 	bl	8000774 <HAL_GetTick>
 8001b56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b5a:	f7fe fe0b 	bl	8000774 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0d5      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b6c:	f7ff fc1b 	bl	80013a6 <LL_RCC_IsActiveFlag_C2HPRE>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f1      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d016      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fb41 	bl	800120e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe fdf2 	bl	8000774 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b94:	f7fe fdee 	bl	8000774 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0b8      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ba6:	f7ff fc11 	bl	80013cc <LL_RCC_IsActiveFlag_SHDHPRE>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f1      	beq.n	8001b94 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d016      	beq.n	8001bea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fb3b 	bl	800123c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bc6:	f7fe fdd5 	bl	8000774 <HAL_GetTick>
 8001bca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bce:	f7fe fdd1 	bl	8000774 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e09b      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001be0:	f7ff fc07 	bl	80013f2 <LL_RCC_IsActiveFlag_PPRE1>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f1      	beq.n	8001bce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d017      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fb31 	bl	8001264 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c02:	f7fe fdb7 	bl	8000774 <HAL_GetTick>
 8001c06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c0a:	f7fe fdb3 	bl	8000774 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e07d      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001c1c:	f7ff fbfb 	bl	8001416 <LL_RCC_IsActiveFlag_PPRE2>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f1      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d043      	beq.n	8001cba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d106      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001c3a:	f7ff f905 	bl	8000e48 <LL_RCC_HSE_IsReady>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11e      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e067      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001c50:	f7ff fb54 	bl	80012fc <LL_RCC_PLL_IsReady>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d113      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e05c      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001c66:	f7ff fa39 	bl	80010dc <LL_RCC_MSI_IsReady>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d108      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e051      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001c74:	f7ff f918 	bl	8000ea8 <LL_RCC_HSI_IsReady>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e04a      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fa77 	bl	800117a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c8c:	f7fe fd72 	bl	8000774 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7fe fd6e 	bl	8000774 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e036      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	f7ff fa7a 	bl	80011a2 <LL_RCC_GetSysClkSource>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d1ec      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d21b      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc8:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 0207 	bic.w	r2, r3, #7
 8001cd0:	4913      	ldr	r1, [pc, #76]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd8:	f7fe fd4c 	bl	8000774 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ce0:	f7fe fd48 	bl	8000774 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e012      	b.n	8001d18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_ClockConfig+0x278>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1ef      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d00:	f000 f880 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <HAL_RCC_ClockConfig+0x27c>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001d0a:	f7fe fd3f 	bl	800078c <HAL_GetTickPrio>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fce1 	bl	80006d8 <HAL_InitTick>
 8001d16:	4603      	mov	r3, r0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58004000 	.word	0x58004000
 8001d24:	200000f0 	.word	0x200000f0

08001d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2e:	f7ff fa38 	bl	80011a2 <LL_RCC_GetSysClkSource>
 8001d32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10a      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001d3a:	f7ff f9f4 	bl	8001126 <LL_RCC_MSI_GetRange>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	4a2b      	ldr	r2, [pc, #172]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e04b      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d102      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e045      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d10a      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d62:	f7ff f841 	bl	8000de8 <LL_RCC_HSE_IsEnabledDiv2>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d102      	bne.n	8001d72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001d6c:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e03a      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001d72:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	e037      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001d78:	f7ff faf7 	bl	800136a <LL_RCC_PLL_GetMainSource>
 8001d7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d003      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x64>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x6a>
 8001d8a:	e00d      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d8e:	60bb      	str	r3, [r7, #8]
        break;
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d92:	f7ff f829 	bl	8000de8 <LL_RCC_HSE_IsEnabledDiv2>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d9e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001da0:	e00d      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001da4:	60bb      	str	r3, [r7, #8]
        break;
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001da8:	f7ff f9bd 	bl	8001126 <LL_RCC_MSI_GetRange>
 8001dac:	4603      	mov	r3, r0
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	4a0f      	ldr	r2, [pc, #60]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	60bb      	str	r3, [r7, #8]
        break;
 8001dbc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001dbe:	f7ff faaf 	bl	8001320 <LL_RCC_PLL_GetN>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	fb03 f402 	mul.w	r4, r3, r2
 8001dca:	f7ff fac2 	bl	8001352 <LL_RCC_PLL_GetDivider>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	fbb4 f4f3 	udiv	r4, r4, r3
 8001dd8:	f7ff faaf 	bl	800133a <LL_RCC_PLL_GetR>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	0f5b      	lsrs	r3, r3, #29
 8001de0:	3301      	adds	r3, #1
 8001de2:	fbb4 f3f3 	udiv	r3, r4, r3
 8001de6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	bf00      	nop
 8001df4:	0800367c 	.word	0x0800367c
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	003d0900 	.word	0x003d0900
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b598      	push	{r3, r4, r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*
   */
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001e08:	f7ff ff8e 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	f7ff fa3d 	bl	800128c <LL_RCC_GetAHBPrescaler>
 8001e12:	4603      	mov	r3, r0
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a03      	ldr	r2, [pc, #12]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd98      	pop	{r3, r4, r7, pc}
 8001e28:	0800363c 	.word	0x0800363c

08001e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2bb0      	cmp	r3, #176	@ 0xb0
 8001e38:	d903      	bls.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8001e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e007      	b.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	4a10      	ldr	r2, [pc, #64]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001e52:	f7ff fa27 	bl	80012a4 <LL_RCC_GetAHB4Prescaler>
 8001e56:	4603      	mov	r3, r0
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4a09      	ldr	r2, [pc, #36]	@ (8001e94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f80c 	bl	8001e98 <RCC_SetFlashLatency>
 8001e80:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	0800367c 	.word	0x0800367c
 8001e90:	0800363c 	.word	0x0800363c
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b08f      	sub	sp, #60	@ 0x3c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <RCC_SetFlashLatency+0x9c>)
 8001ea4:	f107 041c 	add.w	r4, r7, #28
 8001ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001eae:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <RCC_SetFlashLatency+0xa0>)
 8001eb0:	f107 040c 	add.w	r4, r7, #12
 8001eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ec2:	e013      	b.n	8001eec <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	3338      	adds	r3, #56	@ 0x38
 8001eca:	443b      	add	r3, r7
 8001ecc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d807      	bhi.n	8001ee6 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	3338      	adds	r3, #56	@ 0x38
 8001edc:	443b      	add	r3, r7
 8001ede:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8001ee4:	e005      	b.n	8001ef2 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee8:	3301      	adds	r3, #1
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d9e8      	bls.n	8001ec4 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <RCC_SetFlashLatency+0xa4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4910      	ldr	r1, [pc, #64]	@ (8001f3c <RCC_SetFlashLatency+0xa4>)
 8001efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f02:	f7fe fc37 	bl	8000774 <HAL_GetTick>
 8001f06:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f08:	e008      	b.n	8001f1c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f0a:	f7fe fc33 	bl	8000774 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e007      	b.n	8001f2c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <RCC_SetFlashLatency+0xa4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d1ef      	bne.n	8001f0a <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	373c      	adds	r7, #60	@ 0x3c
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}
 8001f34:	08003554 	.word	0x08003554
 8001f38:	08003564 	.word	0x08003564
 8001f3c:	58004000 	.word	0x58004000

08001f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e095      	b.n	800207e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f62:	d009      	beq.n	8001f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	e005      	b.n	8001f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f877 	bl	8002086 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fb8:	d902      	bls.n	8001fc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e002      	b.n	8001fc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001fce:	d007      	beq.n	8001fe0 <HAL_SPI_Init+0xa0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fd8:	d002      	beq.n	8001fe0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	ea42 0103 	orr.w	r1, r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	f003 0204 	and.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800205c:	ea42 0103 	orr.w	r1, r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b088      	sub	sp, #32
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_SPI_Transmit+0x22>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e15f      	b.n	800237c <HAL_SPI_Transmit+0x2e2>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020c4:	f7fe fb56 	bl	8000774 <HAL_GetTick>
 80020c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d002      	beq.n	80020e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020de:	e148      	b.n	8002372 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_SPI_Transmit+0x52>
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020f0:	e13f      	b.n	8002372 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2203      	movs	r2, #3
 80020f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800213c:	d10f      	bne.n	800215e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800214c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800215c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002168:	2b40      	cmp	r3, #64	@ 0x40
 800216a:	d007      	beq.n	800217c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002184:	d94f      	bls.n	8002226 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_SPI_Transmit+0xfa>
 800218e:	8afb      	ldrh	r3, [r7, #22]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d142      	bne.n	800221a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002198:	881a      	ldrh	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a4:	1c9a      	adds	r2, r3, #2
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021b8:	e02f      	b.n	800221a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d112      	bne.n	80021ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021cc:	881a      	ldrh	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d8:	1c9a      	adds	r2, r3, #2
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021ec:	e015      	b.n	800221a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ee:	f7fe fac1 	bl	8000774 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d803      	bhi.n	8002206 <HAL_SPI_Transmit+0x16c>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d102      	bne.n	800220c <HAL_SPI_Transmit+0x172>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d106      	bne.n	800221a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002218:	e0ab      	b.n	8002372 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ca      	bne.n	80021ba <HAL_SPI_Transmit+0x120>
 8002224:	e080      	b.n	8002328 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Transmit+0x19a>
 800222e:	8afb      	ldrh	r3, [r7, #22]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d174      	bne.n	800231e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d912      	bls.n	8002264 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002242:	881a      	ldrh	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	1c9a      	adds	r2, r3, #2
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b02      	subs	r3, #2
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002262:	e05c      	b.n	800231e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	330c      	adds	r3, #12
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800228a:	e048      	b.n	800231e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d12b      	bne.n	80022f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d912      	bls.n	80022ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b02      	subs	r3, #2
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022c8:	e029      	b.n	800231e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	330c      	adds	r3, #12
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022f0:	e015      	b.n	800231e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f2:	f7fe fa3f 	bl	8000774 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d803      	bhi.n	800230a <HAL_SPI_Transmit+0x270>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d102      	bne.n	8002310 <HAL_SPI_Transmit+0x276>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800231c:	e029      	b.n	8002372 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1b1      	bne.n	800228c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	6839      	ldr	r1, [r7, #0]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fa51 	bl	80027d4 <SPI_EndRxTxTransaction>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	77fb      	strb	r3, [r7, #31]
 8002368:	e003      	b.n	8002372 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800237a:	7ffb      	ldrb	r3, [r7, #31]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
    return;
 80023c2:	e0ce      	b.n	8002562 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_SPI_IRQHandler+0x5e>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
    return;
 80023e0:	e0bf      	b.n	8002562 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_SPI_IRQHandler+0x7e>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80b0 	beq.w	8002562 <HAL_SPI_IRQHandler+0x1de>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80aa 	beq.w	8002562 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d023      	beq.n	8002460 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d011      	beq.n	8002448 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002428:	f043 0204 	orr.w	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	e00b      	b.n	8002460 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
        return;
 800245e:	e080      	b.n	8002562 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	f043 0208 	orr.w	r2, r3, #8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d04f      	beq.n	8002560 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_SPI_IRQHandler+0x168>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d034      	beq.n	8002556 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0203 	bic.w	r2, r2, #3
 80024fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	2b00      	cmp	r3, #0
 8002502:	d011      	beq.n	8002528 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <HAL_SPI_IRQHandler+0x1e4>)
 800250a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fa7a 	bl	8000a0a <HAL_DMA_Abort_IT>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002520:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	2b00      	cmp	r3, #0
 800252e:	d016      	beq.n	800255e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <HAL_SPI_IRQHandler+0x1e4>)
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fa64 	bl	8000a0a <HAL_DMA_Abort_IT>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002554:	e003      	b.n	800255e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe f878 	bl	800064c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800255c:	e000      	b.n	8002560 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800255e:	bf00      	nop
    return;
 8002560:	bf00      	nop
  }
}
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	0800256d 	.word	0x0800256d

0800256c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7fe f85f 	bl	800064c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025a8:	f7fe f8e4 	bl	8000774 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025b8:	f7fe f8dc 	bl	8000774 <HAL_GetTick>
 80025bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025be:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	015b      	lsls	r3, r3, #5
 80025c4:	0d1b      	lsrs	r3, r3, #20
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ce:	e054      	b.n	800267a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d050      	beq.n	800267a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025d8:	f7fe f8cc 	bl	8000774 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d902      	bls.n	80025ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d13d      	bne.n	800266a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80025fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002606:	d111      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002610:	d004      	beq.n	800261c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261a:	d107      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800262a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002634:	d10f      	bne.n	8002656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e017      	b.n	800269a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3b01      	subs	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4013      	ands	r3, r2
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	429a      	cmp	r2, r3
 8002696:	d19b      	bne.n	80025d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200000f0 	.word	0x200000f0

080026a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	@ 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ba:	f7fe f85b 	bl	8000774 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80026ca:	f7fe f853 	bl	8000774 <HAL_GetTick>
 80026ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026d8:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00da      	lsls	r2, r3, #3
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80026f0:	e060      	b.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026f8:	d107      	bne.n	800270a <SPI_WaitFifoStateUntilTimeout+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002708:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d050      	beq.n	80027b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002712:	f7fe f82f 	bl	8000774 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271e:	429a      	cmp	r2, r3
 8002720:	d902      	bls.n	8002728 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d13d      	bne.n	80027a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002740:	d111      	bne.n	8002766 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800274a:	d004      	beq.n	8002756 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002754:	d107      	bne.n	8002766 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800276e:	d10f      	bne.n	8002790 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800278e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e010      	b.n	80027c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d196      	bne.n	80026f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3728      	adds	r7, #40	@ 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200000f0 	.word	0x200000f0

080027d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff ff5b 	bl	80026a8 <SPI_WaitFifoStateUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e027      	b.n	8002858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	2180      	movs	r1, #128	@ 0x80
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fec0 	bl	8002598 <SPI_WaitFlagStateUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e014      	b.n	8002858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ff34 	bl	80026a8 <SPI_WaitFifoStateUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e000      	b.n	8002858 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002868:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800286c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002878:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800287c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002880:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002888:	e000      	b.n	800288c <ITM_SendChar+0x2c>
    {
      __NOP();
 800288a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800288c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f9      	beq.n	800288a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002896:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <main>:

// tx buffer
uint8_t txBuffer = 1;

int main(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
    // Initialize GirgitWare
    GirgitWareInit();
 80028b4:	f7fd fcc0 	bl	8000238 <GirgitWareInit>

    // Initialize SPI
    if (SPI_Init(&spiHandle) != SPI_OK)
 80028b8:	4818      	ldr	r0, [pc, #96]	@ (800291c <main+0x6c>)
 80028ba:	f7fd fd9d 	bl	80003f8 <SPI_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <main+0x20>
    {
        printf("SPI initialization failed !\n");
 80028c4:	4816      	ldr	r0, [pc, #88]	@ (8002920 <main+0x70>)
 80028c6:	f000 fa75 	bl	8002db4 <puts>
        ErrorHandler();
 80028ca:	f7fd fcb1 	bl	8000230 <ErrorHandler>
 80028ce:	e002      	b.n	80028d6 <main+0x26>
    } else
    {
        printf("SPI initialization successful !\n");
 80028d0:	4814      	ldr	r0, [pc, #80]	@ (8002924 <main+0x74>)
 80028d2:	f000 fa6f 	bl	8002db4 <puts>
    }

    // Initialize the chip select pin
    chipSelect();
 80028d6:	f000 f87f 	bl	80029d8 <chipSelect>
    printf("SPI chip select setup successful !\n");
 80028da:	4813      	ldr	r0, [pc, #76]	@ (8002928 <main+0x78>)
 80028dc:	f000 fa6a 	bl	8002db4 <puts>

    printf("Starting transmission in blocking mode...\n");
 80028e0:	4812      	ldr	r0, [pc, #72]	@ (800292c <main+0x7c>)
 80028e2:	f000 fa67 	bl	8002db4 <puts>

    // Infinite loop to transmit data

    // Pull down the chip select pin to start transmission
    GPIO_Write(&spiChipSelect, GPIO_PIN_RESET); // CS low
 80028e6:	2100      	movs	r1, #0
 80028e8:	4811      	ldr	r0, [pc, #68]	@ (8002930 <main+0x80>)
 80028ea:	f7fd fd3b 	bl	8000364 <GPIO_Write>
    while (1)
    {
        // Transmit the data
        if (SPI_Transmit(&spiHandle, &txBuffer, 1, 100) != SPI_OK)
 80028ee:	2364      	movs	r3, #100	@ 0x64
 80028f0:	2201      	movs	r2, #1
 80028f2:	4910      	ldr	r1, [pc, #64]	@ (8002934 <main+0x84>)
 80028f4:	4809      	ldr	r0, [pc, #36]	@ (800291c <main+0x6c>)
 80028f6:	f7fd fe3b 	bl	8000570 <SPI_Transmit>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <main+0x5c>
        {
            printf("SPI transmission failed !\n");
 8002900:	480d      	ldr	r0, [pc, #52]	@ (8002938 <main+0x88>)
 8002902:	f000 fa57 	bl	8002db4 <puts>
            ErrorHandler();
 8002906:	f7fd fc93 	bl	8000230 <ErrorHandler>
 800290a:	e002      	b.n	8002912 <main+0x62>
        } else
        {
            printf("SPI transmission successful !\n");
 800290c:	480b      	ldr	r0, [pc, #44]	@ (800293c <main+0x8c>)
 800290e:	f000 fa51 	bl	8002db4 <puts>
        }

        // Optionally add a delay or some other logic here
        DelayMS(2000); // Delay for 2 second
 8002912:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002916:	f7fd fc9d 	bl	8000254 <DelayMS>
        if (SPI_Transmit(&spiHandle, &txBuffer, 1, 100) != SPI_OK)
 800291a:	e7e8      	b.n	80028ee <main+0x3e>
 800291c:	200000bc 	.word	0x200000bc
 8002920:	08003574 	.word	0x08003574
 8002924:	08003590 	.word	0x08003590
 8002928:	080035b0 	.word	0x080035b0
 800292c:	080035d4 	.word	0x080035d4
 8002930:	200001d8 	.word	0x200001d8
 8002934:	200000ec 	.word	0x200000ec
 8002938:	08003600 	.word	0x08003600
 800293c:	0800361c 	.word	0x0800361c

08002940 <SPI1_PinSetup>:

    // No need to deinitialize SPI as per instructions
}

void SPI1_PinSetup(SPI_Handle *user_spi_handle)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

    // GPIO Handle for SPI pins
    GPIO_Handle gpioHandle = {0};
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
 8002958:	615a      	str	r2, [r3, #20]

    // Configure MISO pin (PA.11)
    gpioHandle.port = portMap[PORT_A];
 800295a:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <SPI1_PinSetup+0x90>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60bb      	str	r3, [r7, #8]
    gpioHandle.pin = pinMap[PIN_11];
 8002960:	4b1c      	ldr	r3, [pc, #112]	@ (80029d4 <SPI1_PinSetup+0x94>)
 8002962:	8adb      	ldrh	r3, [r3, #22]
 8002964:	81bb      	strh	r3, [r7, #12]
    gpioHandle.mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	613b      	str	r3, [r7, #16]
    gpioHandle.pullUpPullDownSelect = GPIO_NO_PULL;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
    gpioHandle.alternateFunction = GPIO_AF5_SPI1;
 800296e:	2305      	movs	r3, #5
 8002970:	61bb      	str	r3, [r7, #24]
    gpioHandle.interruptEdge = GPIO_NO_INTERRUPT;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
    GPIO_Init(&gpioHandle);
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fc8e 	bl	800029c <GPIO_Init>

    // Configure MOSI pin (PA.5)
    gpioHandle.port = portMap[PORT_A];
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <SPI1_PinSetup+0x90>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60bb      	str	r3, [r7, #8]
    gpioHandle.pin = pinMap[PIN_5];
 8002986:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <SPI1_PinSetup+0x94>)
 8002988:	895b      	ldrh	r3, [r3, #10]
 800298a:	81bb      	strh	r3, [r7, #12]
    gpioHandle.mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	613b      	str	r3, [r7, #16]
    gpioHandle.pullUpPullDownSelect = GPIO_NO_PULL;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
    gpioHandle.alternateFunction = GPIO_AF4_SPI1;
 8002994:	2304      	movs	r3, #4
 8002996:	61bb      	str	r3, [r7, #24]
    gpioHandle.interruptEdge = GPIO_NO_INTERRUPT;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_Init(&gpioHandle);
 800299c:	f107 0308 	add.w	r3, r7, #8
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fc7b 	bl	800029c <GPIO_Init>

    // Configure Serial Clock (SCK) pin (PA.1)
    gpioHandle.port = portMap[PORT_A];
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <SPI1_PinSetup+0x90>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60bb      	str	r3, [r7, #8]
    gpioHandle.pin = pinMap[PIN_1];
 80029ac:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <SPI1_PinSetup+0x94>)
 80029ae:	885b      	ldrh	r3, [r3, #2]
 80029b0:	81bb      	strh	r3, [r7, #12]
    gpioHandle.mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	613b      	str	r3, [r7, #16]
    gpioHandle.pullUpPullDownSelect = GPIO_NO_PULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
    gpioHandle.alternateFunction = GPIO_AF5_SPI1;
 80029ba:	2305      	movs	r3, #5
 80029bc:	61bb      	str	r3, [r7, #24]
    GPIO_Init(&gpioHandle);
 80029be:	f107 0308 	add.w	r3, r7, #8
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fc6a 	bl	800029c <GPIO_Init>
    //    gpioHandle.pin = pinMap[PIN_4];
    //    gpioHandle.mode = (user_spi_handle->init->deviceMode == SPI_MASTER) ? GPIO_MODE_OUTPUT_PP : GPIO_MODE_INPUT;
    //    gpioHandle.pullUpPullDownSelect = GPIO_NO_PULL;
    //    gpioHandle.alternateFunction = GPIO_AF5_SPI1;
    //    GPIO_Init(&gpioHandle);
}
 80029c8:	bf00      	nop
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000008 	.word	0x20000008
 80029d4:	20000070 	.word	0x20000070

080029d8 <chipSelect>:

void chipSelect(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
    // Configure CS pin (PA.6)
    spiChipSelect.port = portMap[PORT_A];
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <chipSelect+0x2c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <chipSelect+0x30>)
 80029e2:	6013      	str	r3, [r2, #0]
    spiChipSelect.pin = pinMap[PIN_6];
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <chipSelect+0x34>)
 80029e6:	899a      	ldrh	r2, [r3, #12]
 80029e8:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <chipSelect+0x30>)
 80029ea:	809a      	strh	r2, [r3, #4]
    spiChipSelect.mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <chipSelect+0x30>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	609a      	str	r2, [r3, #8]
    spiChipSelect.pullUpPullDownSelect = GPIO_NO_PULL;
 80029f2:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <chipSelect+0x30>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
    GPIO_Init(&spiChipSelect);
 80029f8:	4803      	ldr	r0, [pc, #12]	@ (8002a08 <chipSelect+0x30>)
 80029fa:	f7fd fc4f 	bl	800029c <GPIO_Init>
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000008 	.word	0x20000008
 8002a08:	200001d8 	.word	0x200001d8
 8002a0c:	20000070 	.word	0x20000070

08002a10 <_write>:

/* for printf */
int _write(int file, char *ptr, int len)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e009      	b.n	8002a3a <_write+0x2a>
    {
        ITM_SendChar((*ptr++));
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	60ba      	str	r2, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff16 	bl	8002860 <ITM_SendChar>
    for (i = 0; i < len; i++)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3301      	adds	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dbf1      	blt.n	8002a26 <_write+0x16>
    }
    return len;
 8002a42:	687b      	ldr	r3, [r7, #4]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <GW_SPI1_IRQHandler>:
#include "girgitware_spi.h"

extern SPI_Handle spiHandle;

void GW_SPI1_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN */

    /* USER CODE END */

    // Pass the corresponding SPI handle to the SPI IRQ handler
    GW_SPI_IRQHandler(&spiHandle);
 8002a50:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <GW_SPI1_IRQHandler+0x10>)
 8002a52:	f7fd fdd7 	bl	8000604 <GW_SPI_IRQHandler>

    /* USER CODE BEGIN */

    /* USER CODE END */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200000bc 	.word	0x200000bc

08002a60 <GW_SPI_ErrorCallback>:

    /* USER CODE END */
}

void GW_SPI_ErrorCallback(SPI_Handle *userSPIHandle)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
    (void)userSPIHandle;

    /* USER CODE BEGIN */

    /* USER CODE END */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002a78:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <SystemInit+0x90>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	4a21      	ldr	r2, [pc, #132]	@ (8002b04 <SystemInit+0x90>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002aa0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <SystemInit+0x94>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002abe:	f023 0305 	bic.w	r3, r3, #5
 8002ac2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ace:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <SystemInit+0x98>)
 8002ae0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00
 8002b08:	faf6fefb 	.word	0xfaf6fefb
 8002b0c:	22041000 	.word	0x22041000

08002b10 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002b10:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b12:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b14:	3304      	adds	r3, #4

08002b16 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b16:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b18:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002b1a:	d3f9      	bcc.n	8002b10 <CopyDataInit>
  bx lr
 8002b1c:	4770      	bx	lr

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002b1e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002b20:	3004      	adds	r0, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002b22:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>
  bx lr
 8002b26:	4770      	bx	lr

08002b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b28:	480c      	ldr	r0, [pc, #48]	@ (8002b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b2c:	f7ff ffa2 	bl	8002a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002b30:	480b      	ldr	r0, [pc, #44]	@ (8002b60 <LoopForever+0x6>)
 8002b32:	490c      	ldr	r1, [pc, #48]	@ (8002b64 <LoopForever+0xa>)
 8002b34:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <LoopForever+0xe>)
 8002b36:	2300      	movs	r3, #0
 8002b38:	f7ff ffed 	bl	8002b16 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002b3c:	480b      	ldr	r0, [pc, #44]	@ (8002b6c <LoopForever+0x12>)
 8002b3e:	490c      	ldr	r1, [pc, #48]	@ (8002b70 <LoopForever+0x16>)
 8002b40:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <LoopForever+0x1a>)
 8002b42:	2300      	movs	r3, #0
 8002b44:	f7ff ffe7 	bl	8002b16 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002b48:	480b      	ldr	r0, [pc, #44]	@ (8002b78 <LoopForever+0x1e>)
 8002b4a:	490c      	ldr	r1, [pc, #48]	@ (8002b7c <LoopForever+0x22>)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f7ff ffe8 	bl	8002b22 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b52:	f000 fa5d 	bl	8003010 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002b56:	f7ff feab 	bl	80028b0 <main>

08002b5a <LoopForever>:

LoopForever:
  b LoopForever
 8002b5a:	e7fe      	b.n	8002b5a <LoopForever>
  ldr   r0, =_estack
 8002b5c:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002b60:	20000008 	.word	0x20000008
 8002b64:	20000150 	.word	0x20000150
 8002b68:	080036c4 	.word	0x080036c4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002b6c:	20030000 	.word	0x20030000
 8002b70:	20030000 	.word	0x20030000
 8002b74:	0800380c 	.word	0x0800380c
  INIT_BSS _sbss, _ebss
 8002b78:	20000150 	.word	0x20000150
 8002b7c:	20000340 	.word	0x20000340

08002b80 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_IRQHandler>
	...

08002b84 <std>:
 8002b84:	2300      	movs	r3, #0
 8002b86:	b510      	push	{r4, lr}
 8002b88:	4604      	mov	r4, r0
 8002b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b92:	6083      	str	r3, [r0, #8]
 8002b94:	8181      	strh	r1, [r0, #12]
 8002b96:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b98:	81c2      	strh	r2, [r0, #14]
 8002b9a:	6183      	str	r3, [r0, #24]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	305c      	adds	r0, #92	@ 0x5c
 8002ba2:	f000 f9e7 	bl	8002f74 <memset>
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <std+0x58>)
 8002ba8:	6263      	str	r3, [r4, #36]	@ 0x24
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <std+0x5c>)
 8002bac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <std+0x60>)
 8002bb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <std+0x64>)
 8002bb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <std+0x68>)
 8002bb8:	6224      	str	r4, [r4, #32]
 8002bba:	429c      	cmp	r4, r3
 8002bbc:	d006      	beq.n	8002bcc <std+0x48>
 8002bbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002bc2:	4294      	cmp	r4, r2
 8002bc4:	d002      	beq.n	8002bcc <std+0x48>
 8002bc6:	33d0      	adds	r3, #208	@ 0xd0
 8002bc8:	429c      	cmp	r4, r3
 8002bca:	d105      	bne.n	8002bd8 <std+0x54>
 8002bcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bd4:	f000 ba40 	b.w	8003058 <__retarget_lock_init_recursive>
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	bf00      	nop
 8002bdc:	08002dc5 	.word	0x08002dc5
 8002be0:	08002de7 	.word	0x08002de7
 8002be4:	08002e1f 	.word	0x08002e1f
 8002be8:	08002e43 	.word	0x08002e43
 8002bec:	200001f0 	.word	0x200001f0

08002bf0 <stdio_exit_handler>:
 8002bf0:	4a02      	ldr	r2, [pc, #8]	@ (8002bfc <stdio_exit_handler+0xc>)
 8002bf2:	4903      	ldr	r1, [pc, #12]	@ (8002c00 <stdio_exit_handler+0x10>)
 8002bf4:	4803      	ldr	r0, [pc, #12]	@ (8002c04 <stdio_exit_handler+0x14>)
 8002bf6:	f000 b869 	b.w	8002ccc <_fwalk_sglue>
 8002bfa:	bf00      	nop
 8002bfc:	200000f4 	.word	0x200000f4
 8002c00:	08003359 	.word	0x08003359
 8002c04:	20000104 	.word	0x20000104

08002c08 <cleanup_stdio>:
 8002c08:	6841      	ldr	r1, [r0, #4]
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <cleanup_stdio+0x34>)
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4604      	mov	r4, r0
 8002c12:	d001      	beq.n	8002c18 <cleanup_stdio+0x10>
 8002c14:	f000 fba0 	bl	8003358 <_fflush_r>
 8002c18:	68a1      	ldr	r1, [r4, #8]
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <cleanup_stdio+0x38>)
 8002c1c:	4299      	cmp	r1, r3
 8002c1e:	d002      	beq.n	8002c26 <cleanup_stdio+0x1e>
 8002c20:	4620      	mov	r0, r4
 8002c22:	f000 fb99 	bl	8003358 <_fflush_r>
 8002c26:	68e1      	ldr	r1, [r4, #12]
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <cleanup_stdio+0x3c>)
 8002c2a:	4299      	cmp	r1, r3
 8002c2c:	d004      	beq.n	8002c38 <cleanup_stdio+0x30>
 8002c2e:	4620      	mov	r0, r4
 8002c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c34:	f000 bb90 	b.w	8003358 <_fflush_r>
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200001f0 	.word	0x200001f0
 8002c40:	20000258 	.word	0x20000258
 8002c44:	200002c0 	.word	0x200002c0

08002c48 <global_stdio_init.part.0>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <global_stdio_init.part.0+0x30>)
 8002c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8002c7c <global_stdio_init.part.0+0x34>)
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c80 <global_stdio_init.part.0+0x38>)
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	4620      	mov	r0, r4
 8002c54:	2200      	movs	r2, #0
 8002c56:	2104      	movs	r1, #4
 8002c58:	f7ff ff94 	bl	8002b84 <std>
 8002c5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c60:	2201      	movs	r2, #1
 8002c62:	2109      	movs	r1, #9
 8002c64:	f7ff ff8e 	bl	8002b84 <std>
 8002c68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c72:	2112      	movs	r1, #18
 8002c74:	f7ff bf86 	b.w	8002b84 <std>
 8002c78:	20000328 	.word	0x20000328
 8002c7c:	200001f0 	.word	0x200001f0
 8002c80:	08002bf1 	.word	0x08002bf1

08002c84 <__sfp_lock_acquire>:
 8002c84:	4801      	ldr	r0, [pc, #4]	@ (8002c8c <__sfp_lock_acquire+0x8>)
 8002c86:	f000 b9e8 	b.w	800305a <__retarget_lock_acquire_recursive>
 8002c8a:	bf00      	nop
 8002c8c:	20000331 	.word	0x20000331

08002c90 <__sfp_lock_release>:
 8002c90:	4801      	ldr	r0, [pc, #4]	@ (8002c98 <__sfp_lock_release+0x8>)
 8002c92:	f000 b9e3 	b.w	800305c <__retarget_lock_release_recursive>
 8002c96:	bf00      	nop
 8002c98:	20000331 	.word	0x20000331

08002c9c <__sinit>:
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	f7ff fff0 	bl	8002c84 <__sfp_lock_acquire>
 8002ca4:	6a23      	ldr	r3, [r4, #32]
 8002ca6:	b11b      	cbz	r3, 8002cb0 <__sinit+0x14>
 8002ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cac:	f7ff bff0 	b.w	8002c90 <__sfp_lock_release>
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <__sinit+0x28>)
 8002cb2:	6223      	str	r3, [r4, #32]
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <__sinit+0x2c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f5      	bne.n	8002ca8 <__sinit+0xc>
 8002cbc:	f7ff ffc4 	bl	8002c48 <global_stdio_init.part.0>
 8002cc0:	e7f2      	b.n	8002ca8 <__sinit+0xc>
 8002cc2:	bf00      	nop
 8002cc4:	08002c09 	.word	0x08002c09
 8002cc8:	20000328 	.word	0x20000328

08002ccc <_fwalk_sglue>:
 8002ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	4688      	mov	r8, r1
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8002ce0:	d505      	bpl.n	8002cee <_fwalk_sglue+0x22>
 8002ce2:	6824      	ldr	r4, [r4, #0]
 8002ce4:	2c00      	cmp	r4, #0
 8002ce6:	d1f7      	bne.n	8002cd8 <_fwalk_sglue+0xc>
 8002ce8:	4630      	mov	r0, r6
 8002cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cee:	89ab      	ldrh	r3, [r5, #12]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d907      	bls.n	8002d04 <_fwalk_sglue+0x38>
 8002cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	d003      	beq.n	8002d04 <_fwalk_sglue+0x38>
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	4638      	mov	r0, r7
 8002d00:	47c0      	blx	r8
 8002d02:	4306      	orrs	r6, r0
 8002d04:	3568      	adds	r5, #104	@ 0x68
 8002d06:	e7e9      	b.n	8002cdc <_fwalk_sglue+0x10>

08002d08 <_puts_r>:
 8002d08:	6a03      	ldr	r3, [r0, #32]
 8002d0a:	b570      	push	{r4, r5, r6, lr}
 8002d0c:	6884      	ldr	r4, [r0, #8]
 8002d0e:	4605      	mov	r5, r0
 8002d10:	460e      	mov	r6, r1
 8002d12:	b90b      	cbnz	r3, 8002d18 <_puts_r+0x10>
 8002d14:	f7ff ffc2 	bl	8002c9c <__sinit>
 8002d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d1a:	07db      	lsls	r3, r3, #31
 8002d1c:	d405      	bmi.n	8002d2a <_puts_r+0x22>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	0598      	lsls	r0, r3, #22
 8002d22:	d402      	bmi.n	8002d2a <_puts_r+0x22>
 8002d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d26:	f000 f998 	bl	800305a <__retarget_lock_acquire_recursive>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	0719      	lsls	r1, r3, #28
 8002d2e:	d502      	bpl.n	8002d36 <_puts_r+0x2e>
 8002d30:	6923      	ldr	r3, [r4, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d135      	bne.n	8002da2 <_puts_r+0x9a>
 8002d36:	4621      	mov	r1, r4
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 f8c5 	bl	8002ec8 <__swsetup_r>
 8002d3e:	b380      	cbz	r0, 8002da2 <_puts_r+0x9a>
 8002d40:	f04f 35ff 	mov.w	r5, #4294967295
 8002d44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d46:	07da      	lsls	r2, r3, #31
 8002d48:	d405      	bmi.n	8002d56 <_puts_r+0x4e>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	059b      	lsls	r3, r3, #22
 8002d4e:	d402      	bmi.n	8002d56 <_puts_r+0x4e>
 8002d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d52:	f000 f983 	bl	800305c <__retarget_lock_release_recursive>
 8002d56:	4628      	mov	r0, r5
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	da04      	bge.n	8002d68 <_puts_r+0x60>
 8002d5e:	69a2      	ldr	r2, [r4, #24]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	dc17      	bgt.n	8002d94 <_puts_r+0x8c>
 8002d64:	290a      	cmp	r1, #10
 8002d66:	d015      	beq.n	8002d94 <_puts_r+0x8c>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	6022      	str	r2, [r4, #0]
 8002d6e:	7019      	strb	r1, [r3, #0]
 8002d70:	68a3      	ldr	r3, [r4, #8]
 8002d72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60a3      	str	r3, [r4, #8]
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	d1ed      	bne.n	8002d5a <_puts_r+0x52>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da11      	bge.n	8002da6 <_puts_r+0x9e>
 8002d82:	4622      	mov	r2, r4
 8002d84:	210a      	movs	r1, #10
 8002d86:	4628      	mov	r0, r5
 8002d88:	f000 f85f 	bl	8002e4a <__swbuf_r>
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	d0d7      	beq.n	8002d40 <_puts_r+0x38>
 8002d90:	250a      	movs	r5, #10
 8002d92:	e7d7      	b.n	8002d44 <_puts_r+0x3c>
 8002d94:	4622      	mov	r2, r4
 8002d96:	4628      	mov	r0, r5
 8002d98:	f000 f857 	bl	8002e4a <__swbuf_r>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d1e7      	bne.n	8002d70 <_puts_r+0x68>
 8002da0:	e7ce      	b.n	8002d40 <_puts_r+0x38>
 8002da2:	3e01      	subs	r6, #1
 8002da4:	e7e4      	b.n	8002d70 <_puts_r+0x68>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	6022      	str	r2, [r4, #0]
 8002dac:	220a      	movs	r2, #10
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e7ee      	b.n	8002d90 <_puts_r+0x88>
	...

08002db4 <puts>:
 8002db4:	4b02      	ldr	r3, [pc, #8]	@ (8002dc0 <puts+0xc>)
 8002db6:	4601      	mov	r1, r0
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	f7ff bfa5 	b.w	8002d08 <_puts_r>
 8002dbe:	bf00      	nop
 8002dc0:	20000100 	.word	0x20000100

08002dc4 <__sread>:
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dcc:	f000 f8fc 	bl	8002fc8 <_read_r>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	bfab      	itete	ge
 8002dd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8002dd8:	181b      	addge	r3, r3, r0
 8002dda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002dde:	bfac      	ite	ge
 8002de0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002de2:	81a3      	strhlt	r3, [r4, #12]
 8002de4:	bd10      	pop	{r4, pc}

08002de6 <__swrite>:
 8002de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dea:	461f      	mov	r7, r3
 8002dec:	898b      	ldrh	r3, [r1, #12]
 8002dee:	05db      	lsls	r3, r3, #23
 8002df0:	4605      	mov	r5, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	4616      	mov	r6, r2
 8002df6:	d505      	bpl.n	8002e04 <__swrite+0x1e>
 8002df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f000 f8d0 	bl	8002fa4 <_lseek_r>
 8002e04:	89a3      	ldrh	r3, [r4, #12]
 8002e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e0e:	81a3      	strh	r3, [r4, #12]
 8002e10:	4632      	mov	r2, r6
 8002e12:	463b      	mov	r3, r7
 8002e14:	4628      	mov	r0, r5
 8002e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e1a:	f000 b8e7 	b.w	8002fec <_write_r>

08002e1e <__sseek>:
 8002e1e:	b510      	push	{r4, lr}
 8002e20:	460c      	mov	r4, r1
 8002e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e26:	f000 f8bd 	bl	8002fa4 <_lseek_r>
 8002e2a:	1c43      	adds	r3, r0, #1
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	bf15      	itete	ne
 8002e30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e3a:	81a3      	strheq	r3, [r4, #12]
 8002e3c:	bf18      	it	ne
 8002e3e:	81a3      	strhne	r3, [r4, #12]
 8002e40:	bd10      	pop	{r4, pc}

08002e42 <__sclose>:
 8002e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e46:	f000 b89d 	b.w	8002f84 <_close_r>

08002e4a <__swbuf_r>:
 8002e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4c:	460e      	mov	r6, r1
 8002e4e:	4614      	mov	r4, r2
 8002e50:	4605      	mov	r5, r0
 8002e52:	b118      	cbz	r0, 8002e5c <__swbuf_r+0x12>
 8002e54:	6a03      	ldr	r3, [r0, #32]
 8002e56:	b90b      	cbnz	r3, 8002e5c <__swbuf_r+0x12>
 8002e58:	f7ff ff20 	bl	8002c9c <__sinit>
 8002e5c:	69a3      	ldr	r3, [r4, #24]
 8002e5e:	60a3      	str	r3, [r4, #8]
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	071a      	lsls	r2, r3, #28
 8002e64:	d501      	bpl.n	8002e6a <__swbuf_r+0x20>
 8002e66:	6923      	ldr	r3, [r4, #16]
 8002e68:	b943      	cbnz	r3, 8002e7c <__swbuf_r+0x32>
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 f82b 	bl	8002ec8 <__swsetup_r>
 8002e72:	b118      	cbz	r0, 8002e7c <__swbuf_r+0x32>
 8002e74:	f04f 37ff 	mov.w	r7, #4294967295
 8002e78:	4638      	mov	r0, r7
 8002e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	6922      	ldr	r2, [r4, #16]
 8002e80:	1a98      	subs	r0, r3, r2
 8002e82:	6963      	ldr	r3, [r4, #20]
 8002e84:	b2f6      	uxtb	r6, r6
 8002e86:	4283      	cmp	r3, r0
 8002e88:	4637      	mov	r7, r6
 8002e8a:	dc05      	bgt.n	8002e98 <__swbuf_r+0x4e>
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f000 fa62 	bl	8003358 <_fflush_r>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d1ed      	bne.n	8002e74 <__swbuf_r+0x2a>
 8002e98:	68a3      	ldr	r3, [r4, #8]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	60a3      	str	r3, [r4, #8]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	6022      	str	r2, [r4, #0]
 8002ea4:	701e      	strb	r6, [r3, #0]
 8002ea6:	6962      	ldr	r2, [r4, #20]
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d004      	beq.n	8002eb8 <__swbuf_r+0x6e>
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	07db      	lsls	r3, r3, #31
 8002eb2:	d5e1      	bpl.n	8002e78 <__swbuf_r+0x2e>
 8002eb4:	2e0a      	cmp	r6, #10
 8002eb6:	d1df      	bne.n	8002e78 <__swbuf_r+0x2e>
 8002eb8:	4621      	mov	r1, r4
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f000 fa4c 	bl	8003358 <_fflush_r>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d0d9      	beq.n	8002e78 <__swbuf_r+0x2e>
 8002ec4:	e7d6      	b.n	8002e74 <__swbuf_r+0x2a>
	...

08002ec8 <__swsetup_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <__swsetup_r+0xa8>)
 8002ecc:	4605      	mov	r5, r0
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	b118      	cbz	r0, 8002edc <__swsetup_r+0x14>
 8002ed4:	6a03      	ldr	r3, [r0, #32]
 8002ed6:	b90b      	cbnz	r3, 8002edc <__swsetup_r+0x14>
 8002ed8:	f7ff fee0 	bl	8002c9c <__sinit>
 8002edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee0:	0719      	lsls	r1, r3, #28
 8002ee2:	d422      	bmi.n	8002f2a <__swsetup_r+0x62>
 8002ee4:	06da      	lsls	r2, r3, #27
 8002ee6:	d407      	bmi.n	8002ef8 <__swsetup_r+0x30>
 8002ee8:	2209      	movs	r2, #9
 8002eea:	602a      	str	r2, [r5, #0]
 8002eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	e033      	b.n	8002f60 <__swsetup_r+0x98>
 8002ef8:	0758      	lsls	r0, r3, #29
 8002efa:	d512      	bpl.n	8002f22 <__swsetup_r+0x5a>
 8002efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002efe:	b141      	cbz	r1, 8002f12 <__swsetup_r+0x4a>
 8002f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f04:	4299      	cmp	r1, r3
 8002f06:	d002      	beq.n	8002f0e <__swsetup_r+0x46>
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 f8a9 	bl	8003060 <_free_r>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	b94b      	cbnz	r3, 8002f42 <__swsetup_r+0x7a>
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f38:	d003      	beq.n	8002f42 <__swsetup_r+0x7a>
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f000 fa59 	bl	80033f4 <__smakebuf_r>
 8002f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f46:	f013 0201 	ands.w	r2, r3, #1
 8002f4a:	d00a      	beq.n	8002f62 <__swsetup_r+0x9a>
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60a2      	str	r2, [r4, #8]
 8002f50:	6962      	ldr	r2, [r4, #20]
 8002f52:	4252      	negs	r2, r2
 8002f54:	61a2      	str	r2, [r4, #24]
 8002f56:	6922      	ldr	r2, [r4, #16]
 8002f58:	b942      	cbnz	r2, 8002f6c <__swsetup_r+0xa4>
 8002f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f5e:	d1c5      	bne.n	8002eec <__swsetup_r+0x24>
 8002f60:	bd38      	pop	{r3, r4, r5, pc}
 8002f62:	0799      	lsls	r1, r3, #30
 8002f64:	bf58      	it	pl
 8002f66:	6962      	ldrpl	r2, [r4, #20]
 8002f68:	60a2      	str	r2, [r4, #8]
 8002f6a:	e7f4      	b.n	8002f56 <__swsetup_r+0x8e>
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e7f7      	b.n	8002f60 <__swsetup_r+0x98>
 8002f70:	20000100 	.word	0x20000100

08002f74 <memset>:
 8002f74:	4402      	add	r2, r0
 8002f76:	4603      	mov	r3, r0
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memset+0xa>
 8002f7c:	4770      	bx	lr
 8002f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f82:	e7f9      	b.n	8002f78 <memset+0x4>

08002f84 <_close_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4d06      	ldr	r5, [pc, #24]	@ (8002fa0 <_close_r+0x1c>)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	f000 fa9e 	bl	80034d0 <_close>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_close_r+0x1a>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_close_r+0x1a>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	2000032c 	.word	0x2000032c

08002fa4 <_lseek_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4d07      	ldr	r5, [pc, #28]	@ (8002fc4 <_lseek_r+0x20>)
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4608      	mov	r0, r1
 8002fac:	4611      	mov	r1, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	602a      	str	r2, [r5, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 faa4 	bl	8003500 <_lseek>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_lseek_r+0x1e>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_lseek_r+0x1e>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	2000032c 	.word	0x2000032c

08002fc8 <_read_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4d07      	ldr	r5, [pc, #28]	@ (8002fe8 <_read_r+0x20>)
 8002fcc:	4604      	mov	r4, r0
 8002fce:	4608      	mov	r0, r1
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	602a      	str	r2, [r5, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f000 fa9a 	bl	8003510 <_read>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_read_r+0x1e>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_read_r+0x1e>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	2000032c 	.word	0x2000032c

08002fec <_write_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d07      	ldr	r5, [pc, #28]	@ (800300c <_write_r+0x20>)
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f7ff fd08 	bl	8002a10 <_write>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_write_r+0x1e>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_write_r+0x1e>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	2000032c 	.word	0x2000032c

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4d0d      	ldr	r5, [pc, #52]	@ (8003048 <__libc_init_array+0x38>)
 8003014:	4c0d      	ldr	r4, [pc, #52]	@ (800304c <__libc_init_array+0x3c>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	2600      	movs	r6, #0
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	4d0b      	ldr	r5, [pc, #44]	@ (8003050 <__libc_init_array+0x40>)
 8003022:	4c0c      	ldr	r4, [pc, #48]	@ (8003054 <__libc_init_array+0x44>)
 8003024:	f000 fa8a 	bl	800353c <_init>
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	2600      	movs	r6, #0
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	080036bc 	.word	0x080036bc
 800304c:	080036bc 	.word	0x080036bc
 8003050:	080036bc 	.word	0x080036bc
 8003054:	080036c0 	.word	0x080036c0

08003058 <__retarget_lock_init_recursive>:
 8003058:	4770      	bx	lr

0800305a <__retarget_lock_acquire_recursive>:
 800305a:	4770      	bx	lr

0800305c <__retarget_lock_release_recursive>:
 800305c:	4770      	bx	lr
	...

08003060 <_free_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4605      	mov	r5, r0
 8003064:	2900      	cmp	r1, #0
 8003066:	d041      	beq.n	80030ec <_free_r+0x8c>
 8003068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800306c:	1f0c      	subs	r4, r1, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfb8      	it	lt
 8003072:	18e4      	addlt	r4, r4, r3
 8003074:	f000 f8e0 	bl	8003238 <__malloc_lock>
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <_free_r+0x90>)
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	b933      	cbnz	r3, 800308c <_free_r+0x2c>
 800307e:	6063      	str	r3, [r4, #4]
 8003080:	6014      	str	r4, [r2, #0]
 8003082:	4628      	mov	r0, r5
 8003084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003088:	f000 b8dc 	b.w	8003244 <__malloc_unlock>
 800308c:	42a3      	cmp	r3, r4
 800308e:	d908      	bls.n	80030a2 <_free_r+0x42>
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	1821      	adds	r1, r4, r0
 8003094:	428b      	cmp	r3, r1
 8003096:	bf01      	itttt	eq
 8003098:	6819      	ldreq	r1, [r3, #0]
 800309a:	685b      	ldreq	r3, [r3, #4]
 800309c:	1809      	addeq	r1, r1, r0
 800309e:	6021      	streq	r1, [r4, #0]
 80030a0:	e7ed      	b.n	800307e <_free_r+0x1e>
 80030a2:	461a      	mov	r2, r3
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b10b      	cbz	r3, 80030ac <_free_r+0x4c>
 80030a8:	42a3      	cmp	r3, r4
 80030aa:	d9fa      	bls.n	80030a2 <_free_r+0x42>
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	1850      	adds	r0, r2, r1
 80030b0:	42a0      	cmp	r0, r4
 80030b2:	d10b      	bne.n	80030cc <_free_r+0x6c>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	4401      	add	r1, r0
 80030b8:	1850      	adds	r0, r2, r1
 80030ba:	4283      	cmp	r3, r0
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	d1e0      	bne.n	8003082 <_free_r+0x22>
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	6053      	str	r3, [r2, #4]
 80030c6:	4408      	add	r0, r1
 80030c8:	6010      	str	r0, [r2, #0]
 80030ca:	e7da      	b.n	8003082 <_free_r+0x22>
 80030cc:	d902      	bls.n	80030d4 <_free_r+0x74>
 80030ce:	230c      	movs	r3, #12
 80030d0:	602b      	str	r3, [r5, #0]
 80030d2:	e7d6      	b.n	8003082 <_free_r+0x22>
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	1821      	adds	r1, r4, r0
 80030d8:	428b      	cmp	r3, r1
 80030da:	bf04      	itt	eq
 80030dc:	6819      	ldreq	r1, [r3, #0]
 80030de:	685b      	ldreq	r3, [r3, #4]
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	bf04      	itt	eq
 80030e4:	1809      	addeq	r1, r1, r0
 80030e6:	6021      	streq	r1, [r4, #0]
 80030e8:	6054      	str	r4, [r2, #4]
 80030ea:	e7ca      	b.n	8003082 <_free_r+0x22>
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
 80030ee:	bf00      	nop
 80030f0:	20000338 	.word	0x20000338

080030f4 <sbrk_aligned>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003134 <sbrk_aligned+0x40>)
 80030f8:	460c      	mov	r4, r1
 80030fa:	6831      	ldr	r1, [r6, #0]
 80030fc:	4605      	mov	r5, r0
 80030fe:	b911      	cbnz	r1, 8003106 <sbrk_aligned+0x12>
 8003100:	f000 f9d6 	bl	80034b0 <_sbrk_r>
 8003104:	6030      	str	r0, [r6, #0]
 8003106:	4621      	mov	r1, r4
 8003108:	4628      	mov	r0, r5
 800310a:	f000 f9d1 	bl	80034b0 <_sbrk_r>
 800310e:	1c43      	adds	r3, r0, #1
 8003110:	d103      	bne.n	800311a <sbrk_aligned+0x26>
 8003112:	f04f 34ff 	mov.w	r4, #4294967295
 8003116:	4620      	mov	r0, r4
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	1cc4      	adds	r4, r0, #3
 800311c:	f024 0403 	bic.w	r4, r4, #3
 8003120:	42a0      	cmp	r0, r4
 8003122:	d0f8      	beq.n	8003116 <sbrk_aligned+0x22>
 8003124:	1a21      	subs	r1, r4, r0
 8003126:	4628      	mov	r0, r5
 8003128:	f000 f9c2 	bl	80034b0 <_sbrk_r>
 800312c:	3001      	adds	r0, #1
 800312e:	d1f2      	bne.n	8003116 <sbrk_aligned+0x22>
 8003130:	e7ef      	b.n	8003112 <sbrk_aligned+0x1e>
 8003132:	bf00      	nop
 8003134:	20000334 	.word	0x20000334

08003138 <_malloc_r>:
 8003138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800313c:	1ccd      	adds	r5, r1, #3
 800313e:	f025 0503 	bic.w	r5, r5, #3
 8003142:	3508      	adds	r5, #8
 8003144:	2d0c      	cmp	r5, #12
 8003146:	bf38      	it	cc
 8003148:	250c      	movcc	r5, #12
 800314a:	2d00      	cmp	r5, #0
 800314c:	4606      	mov	r6, r0
 800314e:	db01      	blt.n	8003154 <_malloc_r+0x1c>
 8003150:	42a9      	cmp	r1, r5
 8003152:	d904      	bls.n	800315e <_malloc_r+0x26>
 8003154:	230c      	movs	r3, #12
 8003156:	6033      	str	r3, [r6, #0]
 8003158:	2000      	movs	r0, #0
 800315a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800315e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003234 <_malloc_r+0xfc>
 8003162:	f000 f869 	bl	8003238 <__malloc_lock>
 8003166:	f8d8 3000 	ldr.w	r3, [r8]
 800316a:	461c      	mov	r4, r3
 800316c:	bb44      	cbnz	r4, 80031c0 <_malloc_r+0x88>
 800316e:	4629      	mov	r1, r5
 8003170:	4630      	mov	r0, r6
 8003172:	f7ff ffbf 	bl	80030f4 <sbrk_aligned>
 8003176:	1c43      	adds	r3, r0, #1
 8003178:	4604      	mov	r4, r0
 800317a:	d158      	bne.n	800322e <_malloc_r+0xf6>
 800317c:	f8d8 4000 	ldr.w	r4, [r8]
 8003180:	4627      	mov	r7, r4
 8003182:	2f00      	cmp	r7, #0
 8003184:	d143      	bne.n	800320e <_malloc_r+0xd6>
 8003186:	2c00      	cmp	r4, #0
 8003188:	d04b      	beq.n	8003222 <_malloc_r+0xea>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	4639      	mov	r1, r7
 800318e:	4630      	mov	r0, r6
 8003190:	eb04 0903 	add.w	r9, r4, r3
 8003194:	f000 f98c 	bl	80034b0 <_sbrk_r>
 8003198:	4581      	cmp	r9, r0
 800319a:	d142      	bne.n	8003222 <_malloc_r+0xea>
 800319c:	6821      	ldr	r1, [r4, #0]
 800319e:	1a6d      	subs	r5, r5, r1
 80031a0:	4629      	mov	r1, r5
 80031a2:	4630      	mov	r0, r6
 80031a4:	f7ff ffa6 	bl	80030f4 <sbrk_aligned>
 80031a8:	3001      	adds	r0, #1
 80031aa:	d03a      	beq.n	8003222 <_malloc_r+0xea>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	442b      	add	r3, r5
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	f8d8 3000 	ldr.w	r3, [r8]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	bb62      	cbnz	r2, 8003214 <_malloc_r+0xdc>
 80031ba:	f8c8 7000 	str.w	r7, [r8]
 80031be:	e00f      	b.n	80031e0 <_malloc_r+0xa8>
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	1b52      	subs	r2, r2, r5
 80031c4:	d420      	bmi.n	8003208 <_malloc_r+0xd0>
 80031c6:	2a0b      	cmp	r2, #11
 80031c8:	d917      	bls.n	80031fa <_malloc_r+0xc2>
 80031ca:	1961      	adds	r1, r4, r5
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	6025      	str	r5, [r4, #0]
 80031d0:	bf18      	it	ne
 80031d2:	6059      	strne	r1, [r3, #4]
 80031d4:	6863      	ldr	r3, [r4, #4]
 80031d6:	bf08      	it	eq
 80031d8:	f8c8 1000 	streq.w	r1, [r8]
 80031dc:	5162      	str	r2, [r4, r5]
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 f82f 	bl	8003244 <__malloc_unlock>
 80031e6:	f104 000b 	add.w	r0, r4, #11
 80031ea:	1d23      	adds	r3, r4, #4
 80031ec:	f020 0007 	bic.w	r0, r0, #7
 80031f0:	1ac2      	subs	r2, r0, r3
 80031f2:	bf1c      	itt	ne
 80031f4:	1a1b      	subne	r3, r3, r0
 80031f6:	50a3      	strne	r3, [r4, r2]
 80031f8:	e7af      	b.n	800315a <_malloc_r+0x22>
 80031fa:	6862      	ldr	r2, [r4, #4]
 80031fc:	42a3      	cmp	r3, r4
 80031fe:	bf0c      	ite	eq
 8003200:	f8c8 2000 	streq.w	r2, [r8]
 8003204:	605a      	strne	r2, [r3, #4]
 8003206:	e7eb      	b.n	80031e0 <_malloc_r+0xa8>
 8003208:	4623      	mov	r3, r4
 800320a:	6864      	ldr	r4, [r4, #4]
 800320c:	e7ae      	b.n	800316c <_malloc_r+0x34>
 800320e:	463c      	mov	r4, r7
 8003210:	687f      	ldr	r7, [r7, #4]
 8003212:	e7b6      	b.n	8003182 <_malloc_r+0x4a>
 8003214:	461a      	mov	r2, r3
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	42a3      	cmp	r3, r4
 800321a:	d1fb      	bne.n	8003214 <_malloc_r+0xdc>
 800321c:	2300      	movs	r3, #0
 800321e:	6053      	str	r3, [r2, #4]
 8003220:	e7de      	b.n	80031e0 <_malloc_r+0xa8>
 8003222:	230c      	movs	r3, #12
 8003224:	6033      	str	r3, [r6, #0]
 8003226:	4630      	mov	r0, r6
 8003228:	f000 f80c 	bl	8003244 <__malloc_unlock>
 800322c:	e794      	b.n	8003158 <_malloc_r+0x20>
 800322e:	6005      	str	r5, [r0, #0]
 8003230:	e7d6      	b.n	80031e0 <_malloc_r+0xa8>
 8003232:	bf00      	nop
 8003234:	20000338 	.word	0x20000338

08003238 <__malloc_lock>:
 8003238:	4801      	ldr	r0, [pc, #4]	@ (8003240 <__malloc_lock+0x8>)
 800323a:	f7ff bf0e 	b.w	800305a <__retarget_lock_acquire_recursive>
 800323e:	bf00      	nop
 8003240:	20000330 	.word	0x20000330

08003244 <__malloc_unlock>:
 8003244:	4801      	ldr	r0, [pc, #4]	@ (800324c <__malloc_unlock+0x8>)
 8003246:	f7ff bf09 	b.w	800305c <__retarget_lock_release_recursive>
 800324a:	bf00      	nop
 800324c:	20000330 	.word	0x20000330

08003250 <__sflush_r>:
 8003250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003258:	0716      	lsls	r6, r2, #28
 800325a:	4605      	mov	r5, r0
 800325c:	460c      	mov	r4, r1
 800325e:	d454      	bmi.n	800330a <__sflush_r+0xba>
 8003260:	684b      	ldr	r3, [r1, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dc02      	bgt.n	800326c <__sflush_r+0x1c>
 8003266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	dd48      	ble.n	80032fe <__sflush_r+0xae>
 800326c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800326e:	2e00      	cmp	r6, #0
 8003270:	d045      	beq.n	80032fe <__sflush_r+0xae>
 8003272:	2300      	movs	r3, #0
 8003274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003278:	682f      	ldr	r7, [r5, #0]
 800327a:	6a21      	ldr	r1, [r4, #32]
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	d030      	beq.n	80032e2 <__sflush_r+0x92>
 8003280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	0759      	lsls	r1, r3, #29
 8003286:	d505      	bpl.n	8003294 <__sflush_r+0x44>
 8003288:	6863      	ldr	r3, [r4, #4]
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800328e:	b10b      	cbz	r3, 8003294 <__sflush_r+0x44>
 8003290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003298:	6a21      	ldr	r1, [r4, #32]
 800329a:	4628      	mov	r0, r5
 800329c:	47b0      	blx	r6
 800329e:	1c43      	adds	r3, r0, #1
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	d106      	bne.n	80032b2 <__sflush_r+0x62>
 80032a4:	6829      	ldr	r1, [r5, #0]
 80032a6:	291d      	cmp	r1, #29
 80032a8:	d82b      	bhi.n	8003302 <__sflush_r+0xb2>
 80032aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003354 <__sflush_r+0x104>)
 80032ac:	410a      	asrs	r2, r1
 80032ae:	07d6      	lsls	r6, r2, #31
 80032b0:	d427      	bmi.n	8003302 <__sflush_r+0xb2>
 80032b2:	2200      	movs	r2, #0
 80032b4:	6062      	str	r2, [r4, #4]
 80032b6:	04d9      	lsls	r1, r3, #19
 80032b8:	6922      	ldr	r2, [r4, #16]
 80032ba:	6022      	str	r2, [r4, #0]
 80032bc:	d504      	bpl.n	80032c8 <__sflush_r+0x78>
 80032be:	1c42      	adds	r2, r0, #1
 80032c0:	d101      	bne.n	80032c6 <__sflush_r+0x76>
 80032c2:	682b      	ldr	r3, [r5, #0]
 80032c4:	b903      	cbnz	r3, 80032c8 <__sflush_r+0x78>
 80032c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80032c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032ca:	602f      	str	r7, [r5, #0]
 80032cc:	b1b9      	cbz	r1, 80032fe <__sflush_r+0xae>
 80032ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032d2:	4299      	cmp	r1, r3
 80032d4:	d002      	beq.n	80032dc <__sflush_r+0x8c>
 80032d6:	4628      	mov	r0, r5
 80032d8:	f7ff fec2 	bl	8003060 <_free_r>
 80032dc:	2300      	movs	r3, #0
 80032de:	6363      	str	r3, [r4, #52]	@ 0x34
 80032e0:	e00d      	b.n	80032fe <__sflush_r+0xae>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4628      	mov	r0, r5
 80032e6:	47b0      	blx	r6
 80032e8:	4602      	mov	r2, r0
 80032ea:	1c50      	adds	r0, r2, #1
 80032ec:	d1c9      	bne.n	8003282 <__sflush_r+0x32>
 80032ee:	682b      	ldr	r3, [r5, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0c6      	beq.n	8003282 <__sflush_r+0x32>
 80032f4:	2b1d      	cmp	r3, #29
 80032f6:	d001      	beq.n	80032fc <__sflush_r+0xac>
 80032f8:	2b16      	cmp	r3, #22
 80032fa:	d11e      	bne.n	800333a <__sflush_r+0xea>
 80032fc:	602f      	str	r7, [r5, #0]
 80032fe:	2000      	movs	r0, #0
 8003300:	e022      	b.n	8003348 <__sflush_r+0xf8>
 8003302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003306:	b21b      	sxth	r3, r3
 8003308:	e01b      	b.n	8003342 <__sflush_r+0xf2>
 800330a:	690f      	ldr	r7, [r1, #16]
 800330c:	2f00      	cmp	r7, #0
 800330e:	d0f6      	beq.n	80032fe <__sflush_r+0xae>
 8003310:	0793      	lsls	r3, r2, #30
 8003312:	680e      	ldr	r6, [r1, #0]
 8003314:	bf08      	it	eq
 8003316:	694b      	ldreq	r3, [r1, #20]
 8003318:	600f      	str	r7, [r1, #0]
 800331a:	bf18      	it	ne
 800331c:	2300      	movne	r3, #0
 800331e:	eba6 0807 	sub.w	r8, r6, r7
 8003322:	608b      	str	r3, [r1, #8]
 8003324:	f1b8 0f00 	cmp.w	r8, #0
 8003328:	dde9      	ble.n	80032fe <__sflush_r+0xae>
 800332a:	6a21      	ldr	r1, [r4, #32]
 800332c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800332e:	4643      	mov	r3, r8
 8003330:	463a      	mov	r2, r7
 8003332:	4628      	mov	r0, r5
 8003334:	47b0      	blx	r6
 8003336:	2800      	cmp	r0, #0
 8003338:	dc08      	bgt.n	800334c <__sflush_r+0xfc>
 800333a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800333e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003342:	81a3      	strh	r3, [r4, #12]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800334c:	4407      	add	r7, r0
 800334e:	eba8 0800 	sub.w	r8, r8, r0
 8003352:	e7e7      	b.n	8003324 <__sflush_r+0xd4>
 8003354:	dfbffffe 	.word	0xdfbffffe

08003358 <_fflush_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	690b      	ldr	r3, [r1, #16]
 800335c:	4605      	mov	r5, r0
 800335e:	460c      	mov	r4, r1
 8003360:	b913      	cbnz	r3, 8003368 <_fflush_r+0x10>
 8003362:	2500      	movs	r5, #0
 8003364:	4628      	mov	r0, r5
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	b118      	cbz	r0, 8003372 <_fflush_r+0x1a>
 800336a:	6a03      	ldr	r3, [r0, #32]
 800336c:	b90b      	cbnz	r3, 8003372 <_fflush_r+0x1a>
 800336e:	f7ff fc95 	bl	8002c9c <__sinit>
 8003372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f3      	beq.n	8003362 <_fflush_r+0xa>
 800337a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800337c:	07d0      	lsls	r0, r2, #31
 800337e:	d404      	bmi.n	800338a <_fflush_r+0x32>
 8003380:	0599      	lsls	r1, r3, #22
 8003382:	d402      	bmi.n	800338a <_fflush_r+0x32>
 8003384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003386:	f7ff fe68 	bl	800305a <__retarget_lock_acquire_recursive>
 800338a:	4628      	mov	r0, r5
 800338c:	4621      	mov	r1, r4
 800338e:	f7ff ff5f 	bl	8003250 <__sflush_r>
 8003392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003394:	07da      	lsls	r2, r3, #31
 8003396:	4605      	mov	r5, r0
 8003398:	d4e4      	bmi.n	8003364 <_fflush_r+0xc>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	059b      	lsls	r3, r3, #22
 800339e:	d4e1      	bmi.n	8003364 <_fflush_r+0xc>
 80033a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033a2:	f7ff fe5b 	bl	800305c <__retarget_lock_release_recursive>
 80033a6:	e7dd      	b.n	8003364 <_fflush_r+0xc>

080033a8 <__swhatbuf_r>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	460c      	mov	r4, r1
 80033ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b0:	2900      	cmp	r1, #0
 80033b2:	b096      	sub	sp, #88	@ 0x58
 80033b4:	4615      	mov	r5, r2
 80033b6:	461e      	mov	r6, r3
 80033b8:	da0d      	bge.n	80033d6 <__swhatbuf_r+0x2e>
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2340      	movne	r3, #64	@ 0x40
 80033c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033cc:	2000      	movs	r0, #0
 80033ce:	6031      	str	r1, [r6, #0]
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	b016      	add	sp, #88	@ 0x58
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	466a      	mov	r2, sp
 80033d8:	f000 f848 	bl	800346c <_fstat_r>
 80033dc:	2800      	cmp	r0, #0
 80033de:	dbec      	blt.n	80033ba <__swhatbuf_r+0x12>
 80033e0:	9901      	ldr	r1, [sp, #4]
 80033e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033ea:	4259      	negs	r1, r3
 80033ec:	4159      	adcs	r1, r3
 80033ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033f2:	e7eb      	b.n	80033cc <__swhatbuf_r+0x24>

080033f4 <__smakebuf_r>:
 80033f4:	898b      	ldrh	r3, [r1, #12]
 80033f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033f8:	079d      	lsls	r5, r3, #30
 80033fa:	4606      	mov	r6, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	d507      	bpl.n	8003410 <__smakebuf_r+0x1c>
 8003400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	2301      	movs	r3, #1
 800340a:	6163      	str	r3, [r4, #20]
 800340c:	b003      	add	sp, #12
 800340e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003410:	ab01      	add	r3, sp, #4
 8003412:	466a      	mov	r2, sp
 8003414:	f7ff ffc8 	bl	80033a8 <__swhatbuf_r>
 8003418:	9f00      	ldr	r7, [sp, #0]
 800341a:	4605      	mov	r5, r0
 800341c:	4639      	mov	r1, r7
 800341e:	4630      	mov	r0, r6
 8003420:	f7ff fe8a 	bl	8003138 <_malloc_r>
 8003424:	b948      	cbnz	r0, 800343a <__smakebuf_r+0x46>
 8003426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800342a:	059a      	lsls	r2, r3, #22
 800342c:	d4ee      	bmi.n	800340c <__smakebuf_r+0x18>
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	f043 0302 	orr.w	r3, r3, #2
 8003436:	81a3      	strh	r3, [r4, #12]
 8003438:	e7e2      	b.n	8003400 <__smakebuf_r+0xc>
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	6020      	str	r0, [r4, #0]
 800343e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003442:	81a3      	strh	r3, [r4, #12]
 8003444:	9b01      	ldr	r3, [sp, #4]
 8003446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800344a:	b15b      	cbz	r3, 8003464 <__smakebuf_r+0x70>
 800344c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003450:	4630      	mov	r0, r6
 8003452:	f000 f81d 	bl	8003490 <_isatty_r>
 8003456:	b128      	cbz	r0, 8003464 <__smakebuf_r+0x70>
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	431d      	orrs	r5, r3
 8003468:	81a5      	strh	r5, [r4, #12]
 800346a:	e7cf      	b.n	800340c <__smakebuf_r+0x18>

0800346c <_fstat_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4d07      	ldr	r5, [pc, #28]	@ (800348c <_fstat_r+0x20>)
 8003470:	2300      	movs	r3, #0
 8003472:	4604      	mov	r4, r0
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	f000 f831 	bl	80034e0 <_fstat>
 800347e:	1c43      	adds	r3, r0, #1
 8003480:	d102      	bne.n	8003488 <_fstat_r+0x1c>
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	b103      	cbz	r3, 8003488 <_fstat_r+0x1c>
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	bf00      	nop
 800348c:	2000032c 	.word	0x2000032c

08003490 <_isatty_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4d06      	ldr	r5, [pc, #24]	@ (80034ac <_isatty_r+0x1c>)
 8003494:	2300      	movs	r3, #0
 8003496:	4604      	mov	r4, r0
 8003498:	4608      	mov	r0, r1
 800349a:	602b      	str	r3, [r5, #0]
 800349c:	f000 f828 	bl	80034f0 <_isatty>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d102      	bne.n	80034aa <_isatty_r+0x1a>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	b103      	cbz	r3, 80034aa <_isatty_r+0x1a>
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	2000032c 	.word	0x2000032c

080034b0 <_sbrk_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	4d06      	ldr	r5, [pc, #24]	@ (80034cc <_sbrk_r+0x1c>)
 80034b4:	2300      	movs	r3, #0
 80034b6:	4604      	mov	r4, r0
 80034b8:	4608      	mov	r0, r1
 80034ba:	602b      	str	r3, [r5, #0]
 80034bc:	f000 f830 	bl	8003520 <_sbrk>
 80034c0:	1c43      	adds	r3, r0, #1
 80034c2:	d102      	bne.n	80034ca <_sbrk_r+0x1a>
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	b103      	cbz	r3, 80034ca <_sbrk_r+0x1a>
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	bd38      	pop	{r3, r4, r5, pc}
 80034cc:	2000032c 	.word	0x2000032c

080034d0 <_close>:
 80034d0:	4b02      	ldr	r3, [pc, #8]	@ (80034dc <_close+0xc>)
 80034d2:	2258      	movs	r2, #88	@ 0x58
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f04f 30ff 	mov.w	r0, #4294967295
 80034da:	4770      	bx	lr
 80034dc:	2000032c 	.word	0x2000032c

080034e0 <_fstat>:
 80034e0:	4b02      	ldr	r3, [pc, #8]	@ (80034ec <_fstat+0xc>)
 80034e2:	2258      	movs	r2, #88	@ 0x58
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ea:	4770      	bx	lr
 80034ec:	2000032c 	.word	0x2000032c

080034f0 <_isatty>:
 80034f0:	4b02      	ldr	r3, [pc, #8]	@ (80034fc <_isatty+0xc>)
 80034f2:	2258      	movs	r2, #88	@ 0x58
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	2000      	movs	r0, #0
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000032c 	.word	0x2000032c

08003500 <_lseek>:
 8003500:	4b02      	ldr	r3, [pc, #8]	@ (800350c <_lseek+0xc>)
 8003502:	2258      	movs	r2, #88	@ 0x58
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f04f 30ff 	mov.w	r0, #4294967295
 800350a:	4770      	bx	lr
 800350c:	2000032c 	.word	0x2000032c

08003510 <_read>:
 8003510:	4b02      	ldr	r3, [pc, #8]	@ (800351c <_read+0xc>)
 8003512:	2258      	movs	r2, #88	@ 0x58
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f04f 30ff 	mov.w	r0, #4294967295
 800351a:	4770      	bx	lr
 800351c:	2000032c 	.word	0x2000032c

08003520 <_sbrk>:
 8003520:	4a04      	ldr	r2, [pc, #16]	@ (8003534 <_sbrk+0x14>)
 8003522:	6811      	ldr	r1, [r2, #0]
 8003524:	4603      	mov	r3, r0
 8003526:	b909      	cbnz	r1, 800352c <_sbrk+0xc>
 8003528:	4903      	ldr	r1, [pc, #12]	@ (8003538 <_sbrk+0x18>)
 800352a:	6011      	str	r1, [r2, #0]
 800352c:	6810      	ldr	r0, [r2, #0]
 800352e:	4403      	add	r3, r0
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4770      	bx	lr
 8003534:	2000033c 	.word	0x2000033c
 8003538:	20000340 	.word	0x20000340

0800353c <_init>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr

08003548 <_fini>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr
